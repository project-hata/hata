
module Hata.Language.PP.Definition where

open import Hata.Conventions
open import Hata.Reflection.Definition
open import Verification.Conventions.Meta.Term hiding (_√ó_)
open import Hata.Program.HataCmd.Common

record Signature : ùí∞‚ÇÅ where
  field
    Filetype : ùí∞‚ÇÄ
    File : Filetype -> ùí∞‚ÇÄ

open Signature public

data ‚ô≠ {@‚ô≠ l : Level} (@‚ô≠ A : ùí∞ l) : ùí∞ l where
  con : (@‚ô≠ x : A) ‚Üí ‚ô≠ A

module _ (@‚ô≠ Œ£ : Signature) where
  FILETYPE = ‚ô≠ (Filetype Œ£)

  FILE : FILETYPE -> ùí∞‚ÇÄ
  FILE (con ty) = ‚ô≠ (File Œ£ ty)

module ExamplePP where

  data EFiletype : ùí∞‚ÇÄ where
    YamlSingleString Empty None : EFiletype

  EFile : EFiletype -> ùí∞‚ÇÄ
  EFile YamlSingleString = Text √ó Text
  EFile Empty = ‚ä§
  EFile None = ‚ä•

  Sig : Signature
  Sig = record { Filetype = EFiletype ; File = EFile }

open ExamplePP

S = ExamplePP.Sig


Y : FILE S (con Empty)
Y = con tt


-- X = PP S





