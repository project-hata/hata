
module Verification.Core.Computation.Unification.RiFl.Definition where

open import Verification.Conventions

open import Verification.Core.Set.Decidable
open import Verification.Core.Setoid.Definition
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Limit.Specific.Coequalizer
open import Verification.Core.Category.Std.Limit.Specific.Coequalizer.Preservation


module _ (ùíû : ùí∞ ùëñ) {{_ : isCategory {ùëñ‚ÇÅ} ùíû}} where
  HomClass : ‚àÄ ùëó -> ùí∞ _
  HomClass ùëó = ‚àÄ{a b : ùíû} -> a ‚ü∂ b -> ùí∞ ùëó


module _ {ùíû : ùí∞ ùëñ} {{_ : isCategory {ùëñ‚ÇÅ} ùíû}} where
  record Factorization (P : HomClass ùíû ùëó) (Q : HomClass ùíû ùëò) {a b : ùíû} (f : a ‚ü∂ b) : ùí∞ (ùëñ ÔΩ§ ùëó ÔΩ§ ùëò ÔΩ§ ùëñ‚ÇÅ) where
    constructor factorization
    field center : ùíû
    field fst : a ‚ü∂ center
    field fstP : P fst
    field snd : center ‚ü∂ b
    field sndP : Q snd
    field reduce-Factorization : fst ‚óÜ snd ‚àº f

module _ {ùíû : Category ùëñ} {ùí≥ : Category ùëó} where
  record inImage (F : Functor ùíû ùí≥) {a b : ‚ü® ùí≥ ‚ü©} (f : a ‚ü∂ b) : ùí∞ (ùëñ ÔΩ§ ùëó) where
    field altdom : ‚ü® ùí≥ ‚ü©
    field altcod : ‚ü® ùí≥ ‚ü©
    field althom : altdom ‚ü∂ altcod


record isRigidFlex (‚Ñõ : Category ùëó) (‚Ñ± : Category ùëò) {ùëñ} (ùíû : Category ùëñ) : ùí∞ (ùëñ ÔΩ§ (ùëó ‚Å∫) ÔΩ§ (ùëò ‚Å∫)) where
  field rigid : Functor ‚Ñõ ùíû
  field flex : Functor ‚Ñ± ùíû
  field factor-RiFl : ‚àÄ{a b : ‚ü® ùíû ‚ü©} -> (f : a ‚ü∂ b) -> Factorization (inImage rigid) (inImage flex) f
  field split : ‚àÄ{a b : ‚ü® ‚Ñõ ‚ü©} -> (f : a ‚ü∂ b) -> Functor ‚Ñ± ‚Ñ±
  field split-over-rigid : ‚àÄ{a b : ‚ü® ‚Ñõ ‚ü©} {f : a ‚ü∂ b} -> ‚àÄ{a' : ‚ü® ‚Ñ± ‚ü©} -> ‚ü® flex ‚ü© a' ‚âÖ ‚ü® rigid ‚ü© a -> ‚ü® flex ‚ü© (‚ü® split f ‚ü© a') ‚âÖ ‚ü® rigid ‚ü© b

open isRigidFlex {{...}} public

module _ {ùíû : Category ùëñ} {‚Ñõ : Category ùëó} {‚Ñ± : Category ùëò} {{_ : isRigidFlex ‚Ñõ ‚Ñ± ùíû}} where
  module _ {a b x : ‚ü® ‚Ñ± ‚ü©} {f g : a ‚ü∂ b} {{_ : isCoequalizer f g x}} where
    private
      œÄ‚Çå' : ‚ü® flex ‚ü© b ‚ü∂ ‚ü® flex ‚ü© x
      œÄ‚Çå' = map œÄ‚Çå

      equate-œÄ‚Çå' : map f ‚óÜ map œÄ‚Çå ‚àº map g ‚óÜ map œÄ‚Çå
      equate-œÄ‚Çå' = equate-œÄ‚Çå
        ‚ü™ cong-‚àº ‚ü´
        ‚ü™ functoriality-‚óÜ ‚âÄ‚àº‚âÄ functoriality-‚óÜ ‚ü´

      compute-Coeq' : ‚àÄ{c : ‚ü® ùíû ‚ü©} -> (h : ‚ü® flex ‚ü© b ‚ü∂ c) -> (p : map f ‚óÜ h ‚àº map g ‚óÜ h) -> ‚àë Œª (Œæ : ‚ü® flex ‚ü© x ‚ü∂ c) -> map œÄ‚Çå ‚óÜ Œæ ‚àº h
      compute-Coeq' h p =
        let factorization x h‚ÇÄ h‚ÇÄ‚àà‚Ñõ h‚ÇÅ h‚ÇÅ‚àà‚Ñ± reduce-h = factor-RiFl h
        in {!!}

  --   instance
  --     isCoequalizer:flex : isCoequalizer (map f) (map g) (‚ü® flex ‚ü© x)
  --     isCoequalizer.œÄ‚Çå isCoequalizer:flex = œÄ‚Çå'
  --     isCoequalizer.equate-œÄ‚Çå isCoequalizer:flex = equate-œÄ‚Çå'
  --     isCoequalizer.compute-Coeq isCoequalizer:flex = compute-Coeq'
  --     isCoequalizer.isEpi:œÄ‚Çå isCoequalizer:flex = {!!}


  -- instance
  --   preservesCoequalizers:flex : preservesCoequalizers flex
  --   preservesCoequalizers:flex = {!!}



