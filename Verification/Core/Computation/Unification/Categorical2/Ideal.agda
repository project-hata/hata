
module Verification.Core.Computation.Unification.Categorical2.Ideal where

open import Verification.Conventions
open import Verification.Core.Setoid
open import Verification.Core.Order.Preorder
open import Verification.Core.Order.Lattice
open import Verification.Core.Order.WellFounded.Definition
open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Instance.Category
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Sized.Definition
open import Verification.Core.Category.Std.Morphism.Epi.Definition
open import Verification.Core.Category.Std.Category.As.ZeroMorphismCategory.Definition


-- module _ {ùëñ} {ùíû : ùí∞ _} {{_ : ùêôùêåùêÇùêöùê≠ ùëñ on ùíû}} where
  -- UpFamily : (a : ùíû) -> ùí∞ _
  -- UpFamily a = ‚àÄ{b : ùíû} -> (a ‚ü∂ b) -> ùí∞ (ùëñ)

-- ===* Ideals in categories with zero morphisms


-- | Fix a category |ùíû| with zero morphisms for the remainder of the chapter.
-- [Hide]
module _ {ùëñ} {ùíû : ùí∞ _} {{_ : ùêôùêåùêÇùêöùê≠ ùëñ on ùíû}} where
-- //
  -- |> We denote objects of |ùíû| usually simply by |a|, |b|, |c|, |x| or |y|.
  --   Most of the following statements concerning ideals
  --   are rather easy consequences
  --   of the definitions, and we mostly just give an informal sketch
  --   of the proofs.
  private variable a b c : ùíû

  -- [Definition]
  -- | Let [..] be a fixed object of |ùíû|. A subset of arrows, all with source |a|,
  --   is encoded by a type family [..]. We call such a family a /right ideal
  --   at/ |a| if the following two conditions hold:
  module _ (a : ùíû) (P : ‚àÄ{b : ùíû} -> (f : a ‚ü∂ b) -> ùí∞ ùëñ) where
  -- | {}[]
    record isIdeal : ùí∞ ùëñ where
      -- | 1. Given any arrow |f| in this set, i.e. |P f| holds,
      --      then for any other arrow |g|, the composition |f ‚óÜ g|
      --      is still in this set.
      field ideal-r-‚óÜ : {f : a ‚ü∂ b} -> P f -> (g : b ‚ü∂ c) -> P (f ‚óÜ g)

      -- | 2. All zero arrows are in this set.
      field ideal-pt : ‚àÄ{b} -> P {b} pt

      -- | 3. We further require that if two arrow are equal
      --      with regards to the equivalence relation,
      --      it cannot happen that one of them is in |P|
      --      while the other one is not.
      field transp-Ideal : {f g : a ‚ü∂ b} -> (p : f ‚àº g) -> P f -> P g

    -- |: A /left ideal/ could be defined by reversing arrows.
    --    Since we only need ideals in the direction as defined above,
    --    we usually skip the qualifier and simply speak of ideals.

    open isIdeal {{...}} public
  -- //

  -- [Example]
  -- | Given two substitutions |t s : Œ±s ‚ü∂ Œ≤s|,
  --   the subset of arrows in |ùêíùêÆùêõùê¨ùê≠-FO| with source |Œ≤s|
  --   which are unifiers for |t| and |s|, is denoted
  --   by |CoeqIdeal t s|. It is, in fact an ideal at |Œ≤s|.

  -- //

  -- [Hide]
  module _ (a : ùíû) where
    Ideal·µò = _ :& isIdeal a
    macro Ideal = #structureOn Ideal·µò

  -- //


  -- | {}[]
  module _ {a : ùíû} where

    -- [Definition]
    -- | We define an equivalence relation on ideals.
    --   Let [..] be two ideals at a.
    module _ (A B : Ideal a) where
      -- |> We say that |A ‚àº B| [] if the following can be shown:
      record _‚àº-Ideal_ : ùí∞ (ùëñ) where
        constructor incl
        field ‚ü®_‚ü© : ‚àÄ(f : a ‚ü∂ b) -> ‚ü® A ‚ü© f ‚Üî ‚ü® B ‚ü© f
        -- |> That is, two ideals are to be considered equivalent
        --    if they contain the same arrows.

    -- //

    -- [Lemma]
    -- | This relation on ideals is indeed an equivalence relation.

    -- //

    -- [Proof]
    -- | Note that to prove |‚ü® A ‚ü© f ‚Üî ‚ü® B ‚ü© f|, one
    --   has to give two functions, one converting a proof of
    --   membership in |A| to a proof of membership in |B|,
    --   and one vice versa. Thus reflexivity is shown by the
    --   identity function, symmetry by switching the directions
    --   of the two given functions, and transitivity by composition.

    -- //

    open _‚àº-Ideal_ public
    -- _‚àº-Ideal_ : (A B : Ideal a) -> ùí∞ _
    -- _‚àº-Ideal_ A B = ‚àÄ{b} -> (f : a ‚ü∂ b) -> ‚ü® A ‚ü© f ‚Üî ‚ü® B ‚ü© f

-- [Hide]
    private
      lem-1 : ‚àÄ{A : Ideal a} -> A ‚àº-Ideal A
      lem-1 = incl Œª f ‚Üí (id , id)

      lem-2 : ‚àÄ{A B : Ideal a} -> A ‚àº-Ideal B -> B ‚àº-Ideal A
      lem-2 P = incl Œª f ‚Üí ‚ü® P ‚ü© f .snd , ‚ü® P ‚ü© f .fst

      lem-3 : ‚àÄ{A B C : Ideal a} -> A ‚àº-Ideal B -> B ‚àº-Ideal C -> A ‚àº-Ideal C
      lem-3 P Q = incl Œª f ‚Üí ‚ü® P ‚ü© f .fst ‚óÜ ‚ü® Q ‚ü© f .fst , ‚ü® Q ‚ü© f .snd ‚óÜ ‚ü® P ‚ü© f .snd


    instance
      isSetoid:Ideal : isSetoid (Ideal a)
      isSetoid:Ideal = isSetoid:byDef (_‚àº-Ideal_) lem-1 lem-2 lem-3

    -- //



    -- [Definition]
    -- | We define a preorder on ideals.
    --   Let [..] be two ideals at a.
    module _ (A B : Ideal a) where
      -- |> We say that |A ‚â§ B| [] if the following can be shown:
      record _‚â§-Ideal_ : ùí∞ (ùëñ) where
        constructor incl
        field ‚ü®_‚ü© : (f : a ‚ü∂ b) -> ‚ü® A ‚ü© f -> ‚ü® B ‚ü© f

      -- |> This merely expresses the fact that |A| is a subset of |B|.

    open _‚â§-Ideal_ public
    -- //

    -- [Lemma]
    -- | This relation on ideals is indeed a preorder.

    -- //

    -- [Proof]
    -- | Very similar to the proof of REF. Reflexivity and transitivity
    --   is shown using the identity function and composition of functions.
    --   The fact that |‚àº| is compatible with |‚â§| is also shown by composition.

    -- //

-- [Hide]
    reflexive-Ideal : ‚àÄ{A : Ideal a} -> A ‚â§-Ideal A
    reflexive-Ideal = incl Œª f P ‚Üí P

    _‚ü°-Ideal_ : ‚àÄ{A B C : Ideal a} -> A ‚â§-Ideal B -> B ‚â§-Ideal C -> A ‚â§-Ideal C
    _‚ü°-Ideal_ P Q = incl Œª f ‚Üí ‚ü® P ‚ü© f ‚óÜ ‚ü® Q ‚ü© f

    transp-‚â§-Ideal : ‚àÄ{A B C D : Ideal a} -> (A ‚àº B) -> (C ‚àº D) -> A ‚â§-Ideal C -> B ‚â§-Ideal D
    transp-‚â§-Ideal p q r = incl Œª f ‚Üí ‚ü® p ‚ü© f .snd ‚óÜ ‚ü® r ‚ü© f ‚óÜ ‚ü® q ‚ü© f .fst

    instance
      isPreorder:Ideal : isPreorder _ (Ideal a)
      isPreorder:Ideal = record
        { _‚â§_ = _‚â§-Ideal_
        ; reflexive = reflexive-Ideal
        ; _‚ü°_ = _‚ü°-Ideal_
        ; transp-‚â§ = transp-‚â§-Ideal
        }

      isPartialorder:Ideal : isPartialorder (Ideal a)
      isPartialorder:Ideal = record { antisym = Œª p q ‚Üí incl Œª f ‚Üí ‚ü® p ‚ü© f , ‚ü® q ‚ü© f }


-- //
