
module Verification.Core.Computation.Question.Definition where

open import Verification.Core.Conventions
open import Verification.Core.Setoid.Definition
open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Instance.Category
open import Verification.Core.Data.Prop.Everything
open import Verification.Core.Order.WellFounded.Definition
open import Verification.Core.Order.Preorder
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Functor.Definition



---------------------------------------------------------------
-- Definition of a question


record isQuestion (ùëñ : ùîè) (ùîî : ùí∞ ùëó) : ùí∞ (ùëñ ‚Å∫ ÔΩ§ ùëó) where
  constructor answerWith
  field _‚ÄΩ : (ùîî -> ùí∞ ùëñ)
  infix 300 _‚ÄΩ

open isQuestion {{...}} public

Question : (ùëñ : ùîè ^ 2) -> ùí∞ _
Question ùëñ = ùí∞' (ùëñ ‚åÑ 0) :& isQuestion (ùëñ ‚åÑ 1)

macro
  ùêêùêÆùêûùê¨ùê≠ : ‚àÄ (ùëñ : ùîè ^ 2) -> SomeStructure
  ùêêùêÆùêûùê¨ùê≠ ùëñ = #structureOn (Question ùëñ)

isSolved : (ùîî : ùêêùêÆùêûùê¨ùê≠ ùëñ) -> ùí∞ _
isSolved ùîî = ‚àÄ (q : ‚ü® ùîî ‚ü©) -> q ‚ÄΩ

---------------------------------------------------------------
-- The set of questions has itself a question structure

instance
  isQuestion:ùêêùêÆùêûùê¨ùê≠ : isQuestion _ (ùêêùêÆùêûùê¨ùê≠ ùëñ)
  isQuestion:ùêêùêÆùêûùê¨ùê≠ = answerWith isSolved

---------------------------------------------------------------
-- Definition of question morphisms

module _ (ùîî : ùêêùêÆùêûùê¨ùê≠ (ùëñ , ùëò)) (‚Ñú : ùêêùêÆùêûùê¨ùê≠ (ùëó , ùëò)) where
  record isReductive (f : ‚ü® ùîî ‚ü© -> ‚ü® ‚Ñú ‚ü©) : ùí∞ (ùëñ ÔΩ§ ùëò) where
    constructor reductive
    field reduce : ‚àÄ{q : ‚ü® ùîî ‚ü©} -> f q ‚ÄΩ -> q ‚ÄΩ

  open isReductive {{...}} public

  Reduction : ùí∞ _
  Reduction = _ :& isReductive

private
  instance
    id-Question : ‚àÄ{A : Question ùëñ} -> isReductive A A id-ùí∞
    id-Question = record
      { reduce = Œª x ‚Üí x
      }

  instance
    comp-Question : ‚àÄ{A B C : Question ùëñ} -> {f : Reduction A B} -> {g : Reduction B C} -> isReductive A C (‚ü® f ‚ü© ‚óÜ-ùí∞ ‚ü® g ‚ü©)
    comp-Question {f = f} {g = g} = record
      { reduce = Œª x ‚Üí reduce {{of f}} (reduce {{of g}} x)
      }

---------------------------------------------------------------
-- The category of questions

instance
  isCategory:ùêêùêÆùêûùê¨ùê≠ : isCategory (ùêêùêÆùêûùê¨ùê≠ ùëñ)
  isCategory:ùêêùêÆùêûùê¨ùê≠ =
    record
    { Hom         = Reduction
    ; isSetoid:Hom = isSetoid:byDef (Œª f g -> ‚ü® f ‚ü© ‚â° ‚ü® g ‚ü©) {!!} {!!} {!!}
    ; id           = (‚Ä≤ id-ùí∞ ‚Ä≤ {{id-Question}})
    ; _‚óÜ_          = Œª f g -> (‚Ä≤ ‚ü® f ‚ü© ‚óÜ-ùí∞ ‚ü® g ‚ü© ‚Ä≤ {{comp-Question {f = f} {g}}})
    ; unit-l-‚óÜ   = refl
    ; unit-r-‚óÜ   = refl
    ; unit-2-‚óÜ   = refl
    ; assoc-l-‚óÜ  = refl
    ; assoc-r-‚óÜ  = refl
    ; _‚óà_        = {!!}
    }

private
  Forget : ùêêùêÆùêûùê¨ùê≠ ùëñ -> ùêìùê≤ùê©ùêû _
  Forget ùîî = ‚ü® ùîî ‚ü©

instance
  Register:ForgetQuestion = register‚ÇÅ[ "" , ùëñ ] Forget {ùëñ}

instance
  isFunctor:ForgetQuestion : isFunctor (ùêêùêÆùêûùê¨ùê≠ ùëñ) (ùêìùê≤ùê©ùêû _) Forget
  isFunctor.map isFunctor:ForgetQuestion = Œª f -> ‚ü® f ‚ü©
  isFunctor.isSetoidHom:map isFunctor:ForgetQuestion = {!!}
  isFunctor.functoriality-id isFunctor:ForgetQuestion = {!!}
  isFunctor.functoriality-‚óÜ isFunctor:ForgetQuestion = {!!}




