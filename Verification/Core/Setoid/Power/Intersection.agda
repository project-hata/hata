
module Verification.Core.Setoid.Power.Intersection where

open import Verification.Core.Conventions
open import Verification.Core.Data.Prop.Definition
open import Verification.Core.Data.Product.Definition
open import Verification.Core.Setoid.Definition
open import Verification.Core.Setoid.Instance.Category
open import Verification.Core.Setoid.Power.Definition


----------------------------------------------------------
-- Finitary intersections
----------------------------------------------------------

module _ {A : ­Юљњ­ЮљГ­ЮљЮ ­ЮЉќ} where

  module _
         {U : РЪе A РЪЕ -> Prop _} {{_ : isSubsetoid U}}
         {V : РЪе A РЪЕ -> Prop _} {{_ : isSubsetoid V}}
         where
    instance
      isSubsetoid:РѕЕ-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ : isSubsetoid (U РѕЕрхў V)
      isSubsetoid:РѕЕ-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ = record
        { transp-Рѕ╝ = ╬╗ aРѕ╝b (aРѕѕU , bРѕѕV) Рєњ (transp-Рѕ╝ aРѕ╝b aРѕѕU) , (transp-Рѕ╝ aРѕ╝b bРѕѕV)
        }

  _РѕЕ-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ_ : ­ЮњФ A -> ­ЮњФ A -> ­ЮњФ A
  _РѕЕ-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ_ U V = U РѕЕ V



  instance
    isSubsetoid:РёД-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ : isSubsetoid {X = РЪе A РЪЕ} РёДрхў
    isSubsetoid:РёД-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ = record
      { transp-Рѕ╝ = ╬╗ aРѕ╝b aРѕѕРёД Рєњ tt
      }

  РёД-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ : ­ЮњФ A
  РёД-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ = РёД

----------------------------------------------------------
-- Indexed intersections
----------------------------------------------------------

module _ {A : ­Юљњ­ЮљГ­ЮљЮ ­ЮЉќ} {I : ­Юњ░Рѓђ} where
  -- module _ {Uрхб : I -> РЪе A РЪЕ -> Prop _} {{_ : Рѕђ{i} -> isSubsetoid (Uрхб i)}} where
  module _ (Uрхб : I -> ­ЮњФ A) where
    instance
      isSubsetoid:РІѓ-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ : isSubsetoid (РІѓрхў Uрхб)
      isSubsetoid:РІѓ-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ = record
        { transp-Рѕ╝ = ╬╗ aРѕ╝b aрхбРѕѕU i Рєњ transp-Рѕ╝ {{_}} {{of Uрхб i}} aРѕ╝b (aрхбРѕѕU i)
        }

  РІѓ-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ : (Uрхб : I -> ­ЮњФ A) -> ­ЮњФ A
  РІѓ-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ Uрхб = РІѓрхў Uрхб since isSubsetoid:РІѓ-­ЮњФ-­Юљњ­ЮљГ­ЮљЮ Uрхб


