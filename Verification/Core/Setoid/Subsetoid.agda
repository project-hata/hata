
module Verification.Core.Setoid.Subsetoid where

open import Verification.Conventions

open import Verification.Core.Data.Prop.Everything
open import Verification.Core.Setoid.Definition
open import Verification.Core.Order.Preorder
open import Verification.Core.Order.Lattice

module _ {X : Setoid ùëñ} where

  instance
    isSetoid:Subsetoid : isSetoid (Subsetoid X)
    isSetoid:Subsetoid = isSetoid:hasU

  instance
    isPreorder:Subsetoid : isPreorder _ ‚Ä≤(Subsetoid X)‚Ä≤
    isPreorder._‚â§_ isPreorder:Subsetoid = ‚â§-Base (Œª a b -> ‚ü® a ‚ü© ‚â§ ‚ü® b ‚ü©)
    isPreorder.reflexive isPreorder:Subsetoid = incl reflexive
    isPreorder._‚ü°_ isPreorder:Subsetoid p q = incl (‚ü® p ‚ü© ‚ü° ‚ü® q ‚ü©)
    isPreorder.transp-‚â§ isPreorder:Subsetoid p q P = {!!} -- incl (‚ü® transp-‚â§ ‚ü® p ‚ü© ‚ü® q ‚ü© (incl ‚ü® P ‚ü©) ‚ü©)
    -- incl ‚ü® transp-‚â§ (incl ‚ü® p ‚ü©) (incl ‚ü® q ‚ü©) (incl ‚ü® P ‚ü©) ‚ü©

  instance
    isSubsetoid:‚ä§ : isSubsetoid {X = ‚ü® X ‚ü©} ‚ä§
    isSubsetoid.transp-Subsetoid isSubsetoid:‚ä§ p _ = tt

    -- isSubsetoid:‚àß : ‚àÄ{U V : Subsetoid X} -> isSubsetoid X (‚ü® U ‚ü© ‚àß ‚ü® V ‚ü©)

    isSubsetoid:‚àß : ‚àÄ{U V : ùí´ ‚ü® X ‚ü©} {{_ : isSubsetoid U}} {{_ : isSubsetoid V}} -> isSubsetoid (U ‚àß V)
    isSubsetoid:‚àß = record
      { transp-Subsetoid = Œª p (P , Q) -> transp-Subsetoid p P , transp-Subsetoid p Q
      }

  instance
    hasFiniteMeets:Subsetoid : hasFiniteMeets ‚Ä≤(Subsetoid X)‚Ä≤
    hasFiniteMeets.‚ä§ hasFiniteMeets:Subsetoid = ‚Ä≤ ‚ä§ ‚Ä≤
    hasFiniteMeets.terminal-‚ä§ hasFiniteMeets:Subsetoid = incl terminal-‚ä§
    hasFiniteMeets._‚àß_ hasFiniteMeets:Subsetoid I J = ‚Ä≤ ‚ü® I ‚ü© ‚àß ‚ü® J ‚ü© ‚Ä≤
    hasFiniteMeets.œÄ‚ÇÄ-‚àß hasFiniteMeets:Subsetoid = incl œÄ‚ÇÄ-‚àß
    hasFiniteMeets.œÄ‚ÇÅ-‚àß hasFiniteMeets:Subsetoid = incl œÄ‚ÇÅ-‚àß
    hasFiniteMeets.‚ü®_,_‚ü©-‚àß hasFiniteMeets:Subsetoid f g = {!!}

  instance
    isSubsetoid:‚ä• : isSubsetoid {X = ‚ü® X ‚ü©} ‚ä•
    isSubsetoid.transp-Subsetoid isSubsetoid:‚ä• p _ = {!!}


    isSubsetoid:‚à® : ‚àÄ{U V : ùí´ ‚ü® X ‚ü©} {{_ : isSubsetoid U}} {{_ : isSubsetoid V}} -> isSubsetoid (U ‚à® V)
    isSubsetoid:‚à® = {!!} -- record
      -- { transp-Subsetoid = Œª p (P , Q) -> transp-Subsetoid p P , transp-Subsetoid p Q
      -- }

  instance
    hasFiniteJoins:Subsetoid : hasFiniteJoins ‚Ä≤(Subsetoid X)‚Ä≤
    hasFiniteJoins.‚ä• hasFiniteJoins:Subsetoid = ‚Ä≤ ‚ä• ‚Ä≤
    hasFiniteJoins.initial-‚ä• hasFiniteJoins:Subsetoid = incl initial-‚ä•
    hasFiniteJoins._‚à®_ hasFiniteJoins:Subsetoid I J = ‚Ä≤ ‚ü® I ‚ü© ‚à® ‚ü® J ‚ü© ‚Ä≤
    hasFiniteJoins.Œπ‚ÇÄ-‚à® hasFiniteJoins:Subsetoid = incl Œπ‚ÇÄ-‚à®
    hasFiniteJoins.Œπ‚ÇÅ-‚à® hasFiniteJoins:Subsetoid = incl Œπ‚ÇÅ-‚à®
    hasFiniteJoins.[_,_]-‚à® hasFiniteJoins:Subsetoid f g = {!!}
      -- incl ‚ü® ‚ü® (incl ‚ü® f ‚ü©) , (incl ‚ü® g ‚ü©) ‚ü©-‚àß ‚ü©


