
module Verification.Core.Category.Infinity.Simplicial.Object.Definition where

open import Verification.Conventions

open import Verification.Core.Data.Fin.Definition
open import Verification.Core.Set.Finite.Definition
open import Verification.Core.Setoid.Definition
open import Verification.Core.Setoid.Instance.Category
open import Verification.Core.Set.Discrete
open import Verification.Core.Order.Preorder
open import Verification.Core.Order.Totalorder
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Opposite
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Functor.Representable
open import Verification.Core.Category.Std.Functor.Instance.Category
open import Verification.Core.Category.Infinity.Simplicial.Simplex.Definition

Simplicial : Рѕђ ­ЮЉЌ -> (­Юњъ : Category ­ЮЉќ) -> ­Юњ░ _
Simplicial ­ЮЉЌ ­Юњъ = Functor (РѕєL ­ЮЉЌ рхњрхќ) ­Юњъ


РѕєStd : Рѕђ ­ЮЉЌ ­ЮЉќ -> ­Юњ░ _
РѕєStd ­ЮЉЌ ­ЮЉќ = Simplicial ­ЮЉЌ (Std ­ЮЉќ)


-- now we want to build examples
Рѕє[_] : Рѕђ(n : РёЋ) -> РѕєStd _ _
Рѕє[ n ] = Рђ▓ [_, Рђ▓ Fin n Рђ▓ ]­ЮЊѕ Рђ▓

-- sss = Рѕє[ 0 ]

-- now, by yoneda, we have
lem-10 : Рѕђ{X : РѕєStd _ _} -> (РЪе X РЪЕ Рђ▓ Fin n Рђ▓) РЅЁ­ЮЊѕ [ Рѕє[ n ] , X ]­ЮЊѕ
lem-10 = {!!}


