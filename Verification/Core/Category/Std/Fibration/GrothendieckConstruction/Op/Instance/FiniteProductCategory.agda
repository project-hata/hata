
module Verification.Core.Category.Std.Fibration.GrothendieckConstruction.Op.Instance.FiniteProductCategory where

open import Verification.Conventions hiding (_Ріћ_)

open import Verification.Core.Setoid.Definition
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Opposite
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Category.Instance.Category
open import Verification.Core.Category.Std.Functor.Instance.Category
open import Verification.Core.Category.Std.Natural.Definition
open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Core.Category.Std.Limit.Specific.Product

open import Verification.Core.Category.Std.Fibration.GrothendieckConstruction.Op.Definition


module _ {­Юњъ : Category ­ЮЉќ} {F : Functor (­Юњъ рхњрхќ) (­Юљѓ­Юљџ­ЮљГ ­ЮЉЌ)}
         {{_ : hasProducts ­Юњъ}} {{_ : Рѕђ{c : РЪе ­Юњъ РЪЕ} -> hasProducts (РЪе F РЪЕ c)}}
  where

  private
    instance
      isCategory:F : Рѕђ{b : РЪе ­Юњъ РЪЕ} -> isCategory (РЪе РЪе F РЪЕ b РЪЕ)
      isCategory:F {b} = of РЪе F РЪЕ b

    instance
      isSetoid:F : Рѕђ{b : РЪе ­Юњъ РЪЕ} {x y : РЪе РЪе F РЪЕ b РЪЕ} -> isSetoid (x РЪХ y)
      isSetoid:F {b} = isSetoid:Hom {{of РЪе F РЪЕ b}}

    instance
      isProduct:F : Рѕђ{c : РЪе ­Юњъ РЪЕ} -> {a b : РЪе РЪе F РЪЕ c РЪЕ} -> isProduct a b (a РіЊ b)
      isProduct:F = isProduct:РіЊ

  infixl 80 _РіЊ-Реірхњрхќ_

  _РіЊ-Реірхњрхќ_ : Реірхњрхќ F -> Реірхњрхќ F -> Реірхњрхќ F
  _РіЊ-Реірхњрхќ_ a b = (base a РіЊ base b) , РЪе map ¤ђРѓђ РЪЕ (fib a) РіЊ РЪе map ¤ђРѓЂ РЪЕ (fib b)

  module _ {a b : Реірхњрхќ F} where
    ¤ђРѓђ-Реірхњрхќ : a РіЊ-Реірхњрхќ b РЪХ a
    ¤ђРѓђ-Реірхњрхќ = ¤ђРѓђ , ¤ђРѓђ
