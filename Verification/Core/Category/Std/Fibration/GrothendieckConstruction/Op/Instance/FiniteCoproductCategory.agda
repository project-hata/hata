
module Verification.Core.Category.Std.Fibration.GrothendieckConstruction.Op.Instance.FiniteCoproductCategory where

open import Verification.Conventions hiding (_‚äî_)

open import Verification.Core.Setoid.Definition
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Opposite
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Category.Instance.Category
open import Verification.Core.Category.Std.Functor.Instance.Category
open import Verification.Core.Category.Std.Natural.Definition
open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Core.Category.Std.Limit.Specific.Product

open import Verification.Core.Category.Std.Fibration.GrothendieckConstruction.Op.Definition


-- record hasCoproductGluing (F : Functor ùíû ·µí·µñ)

-- module _ {ùíû : Category ùëñ} {F : Functor (ùíû ·µí·µñ) (ùêÇùêöùê≠ ùëó)}
--          {{_ : hasCoproducts ùíû}}
--          -- {{_ : ‚àÄ{c : ‚ü® ùíû ‚ü©} -> hasCoproducts (‚ü® F ‚ü© c)}}
--   where

--   infixl 80 _‚äî-‚®ä·µí·µñ_

--   _‚äî-‚®ä·µí·µñ_ : ‚®ä·µí·µñ F -> ‚®ä·µí·µñ F -> ‚®ä·µí·µñ F
--   _‚äî-‚®ä·µí·µñ_ a b = (base a ‚äî base b) , {!!}
--   -- ‚ü® map œÄ‚ÇÄ ‚ü© (fib a) ‚äî ‚ü® map œÄ‚ÇÅ ‚ü© (fib b)

--   -- module _ {a b : ‚®ä·µí·µñ F} where
--   --   Œπ‚ÇÄ-‚®ä·µí·µñ : a ‚ü∂ a ‚äî-‚®ä·µí·µñ b
--   --   Œπ‚ÇÄ-‚®ä·µí·µñ = {!!} , {!!}
--   instance
--     hasCoproducts:‚®ä·µí·µñ : hasCoproducts ‚Ä≤(‚®ä·µí·µñ F)‚Ä≤
--     hasCoproducts:‚®ä·µí·µñ = {!!}

--   instance
--     hasFiniteCoproducts:‚®ä·µí·µñ : hasFiniteCoproducts ‚Ä≤(‚®ä·µí·µñ F)‚Ä≤
--     hasFiniteCoproducts:‚®ä·µí·µñ = {!!}



