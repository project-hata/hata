
module Verification.Core.Category.Std.Functor.Adjoint.Definition where

open import Verification.Conventions

open import Verification.Core.Setoid.Morphism
open import Verification.Core.Setoid.Definition
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Instance.Category
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Natural.Definition
open import Verification.Core.Category.Std.Category.Notation.Associativity


module _ {ùíû : Category ùëñ} {ùíü : Category ùëó} where
  record isAdjoint (F : Functor ùíû ùíü) (G : Functor ùíü ùíû) : ùí∞ (ùëñ ÔΩ§ ùëó) where
    field adj    : ‚àÄ(a : ‚ü® ùíü ‚ü©) -> ‚ü® F ‚ü© (‚ü® G ‚ü© a) ‚ü∂ a
    field coadj  : ‚àÄ(a : ‚ü® ùíû ‚ü©) -> a ‚ü∂ ‚ü® G ‚ü© (‚ü® F ‚ü© a)
    field {{isNatural:adj}} : isNatural (G ‚óÜ-ùêÇùêöùê≠ F) id adj
    field {{isNatural:coadj}} : isNatural id (F ‚óÜ-ùêÇùêöùê≠ G) coadj
    field reduce-coadj : ‚àÄ{b : ‚ü® ùíü ‚ü©}  -> coadj _ ‚óÜ map (adj _) ‚àº id {a = ‚ü® G ‚ü© b}
    field reduce-adj : ‚àÄ{a : ‚ü® ùíû ‚ü©}    -> map (coadj _) ‚óÜ (adj _) ‚àº id {a = ‚ü® F ‚ü© a}

  open isAdjoint {{...}} public

  _‚ä£_ = isAdjoint


  module _ {F : Functor ùíû ùíü} {G : Functor ùíü ùíû} {{_ : isAdjoint F G}} where

    -- |> For any two objects [..] and [..],
    module _ {a : ‚ü® ùíû ‚ü©} {b : ‚ü® ùíü ‚ü©} where

      -- |> we have an isomorphism between hom-types as follows:
      free : (a ‚ü∂ ‚ü® G ‚ü© b) -> (‚ü® F ‚ü© a ‚ü∂ b)
      free f = map f ‚óÜ adj _

      -- | The inverse direction is given by:
      cofree : (‚ü® F ‚ü© a ‚ü∂ b) -> (a ‚ü∂ ‚ü® G ‚ü© b)
      cofree f = coadj _ ‚óÜ map f

      inv-free : ‚àÄ{f} -> free (cofree f) ‚àº f
      inv-free {f} =
        map ((coadj _) ‚óÜ (map f)) ‚óÜ adj _      ‚ü® functoriality-‚óÜ ‚óà refl ‚ü©-‚àº
        map (coadj _) ‚óÜ map (map f) ‚óÜ adj _    ‚ü® assoc-l-‚óÜ ‚ü©-‚àº
        map (coadj _) ‚óÜ (map (map f) ‚óÜ adj _)  ‚ü® refl ‚óà naturality f ‚Åª¬π ‚ü©-‚àº
        map (coadj _) ‚óÜ (adj _ ‚óÜ f)            ‚ü® assoc-r-‚óÜ ‚ü©-‚àº
        (map (coadj _) ‚óÜ adj _) ‚óÜ f            ‚ü® reduce-adj ‚óà refl ‚ü©-‚àº
        id ‚óÜ f                           ‚ü® unit-l-‚óÜ ‚ü©-‚àº
        f                                ‚àé

      inv-cofree : ‚àÄ{f} -> cofree (free f) ‚àº f
      inv-cofree {f} = {!!}

      cong-‚àº-free : ‚àÄ{f g} -> f ‚àº g -> free f ‚àº free g
      cong-‚àº-free p = p
        ‚ü™ cong-‚àº ‚ü´
        ‚ü™ (_‚óà refl) ‚ü´

      cong-‚àº-cofree : ‚àÄ{f g} -> f ‚àº g -> cofree f ‚àº cofree g
      cong-‚àº-cofree p = p
        ‚ü™ cong-‚àº ‚ü´
        ‚ü™ (refl ‚óà_) ‚ü´

      cancel-injective-free : ‚àÄ{f g} -> free f ‚àº free g -> f ‚àº g
      cancel-injective-free p = p
        ‚ü™ cong-‚àº-cofree ‚ü´
        ‚ü™ inv-cofree ‚âÄ‚àº‚âÄ inv-cofree ‚ü´

      cancel-injective-cofree : ‚àÄ{f g} -> cofree f ‚àº cofree g -> f ‚àº g
      cancel-injective-cofree p = p
        ‚ü™ cong-‚àº-free ‚ü´
        ‚ü™ inv-free ‚âÄ‚àº‚âÄ inv-free ‚ü´

      -- isSetoidHom:free : isSetoidHom ‚Ä≤(a ‚ü∂ ‚ü® G ‚ü© b)‚Ä≤ ‚Ä≤(‚ü® F ‚ü© a ‚ü∂ b)‚Ä≤ free
      -- isSetoidHom:free = record { cong-‚àº = {!!} }

      -- isSetoidHom:cofree : isSetoidHom ‚Ä≤(‚ü® F ‚ü© a ‚ü∂ b)‚Ä≤ ‚Ä≤(a ‚ü∂ ‚ü® G ‚ü© b)‚Ä≤ cofree
      -- isSetoidHom:cofree = record { cong-‚àº = {!!} }

      -- isInjective:free : isInjective free
      -- isInjective:free = record { cancel-injective = {!!} }

      -- isInjective:cofree : isInjective cofree
      -- isInjective:cofree = record { cancel-injective = {!!} }

