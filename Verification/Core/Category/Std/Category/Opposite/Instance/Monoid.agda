
module Verification.Core.Category.Std.Category.Opposite.Instance.Monoid where

open import Verification.Conventions

open import Verification.Core.Setoid
open import Verification.Core.Algebra.Monoid.Definition
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Opposite.Definition
open import Verification.Core.Category.Std.Morphism.Iso


module _ {­Юњъ : Category ­ЮЉќ} where
  private instance
    _ : isSetoid РЪе ­Юњъ РЪЕ
    _ = isSetoid:byCategory

    _ : isSetoid (­Юњъ рхњрхќРї»)
    _ = isSetoid:byCategory

  module _ {{_ : isMonoid Рђ▓ РЪе ­Юњъ РЪЕ Рђ▓}} where

    instance
      isMonoid:рхњрхќ : isMonoid (­Юњъ рхњрхќРї»)
      isMonoid:рхњрхќ = record
                      { _РІє_ = ╬╗ a b -> incl (РЪе a РЪЕ РІє РЪе b РЪЕ)
                      ; РЌї = incl РЌї
                      ; unit-l-РІє = {!!}
                      ; unit-r-РІє = {!!}
                      ; assoc-l-РІє = {!!}
                      ; _РЅђРІєРЅђ_ = {!!}
                      }



