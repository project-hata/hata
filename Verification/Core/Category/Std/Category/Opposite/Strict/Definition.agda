
module Verification.Core.Category.Std.Category.Opposite.Strict.Definition where

open import Verification.Conventions

open import Verification.Core.Setoid.Definition
open import Verification.Core.Category.Std.Category.Definition


-- | For a more general kind of example, consider an arbitrary category |­Юњъ|.
--   Then we can construct another category |­Юњъ рхњрхќ| which has the same objects
--   as |­Юњъ|, but where the direction of all arrows is reversed.

-- [Definition]
-- | There is a function [..], mapping a category to its opposite. It is defined as:
module _ {­Юњъ : ­Юњ░ ­ЮЉќ} {{­ЮњъP : isCategory {­ЮЉЌ} ­Юњъ}} where
  isCategory:рхњрхќ : isCategory ­Юњъ
  isCategory.Hom isCategory:рхњрхќ a b = Hom b a
  isCategory.isSetoid:Hom isCategory:рхњрхќ = isSetoid:Hom {{­ЮњъP}}
  isCategory.id isCategory:рхњрхќ = id
  isCategory._РЌє_ isCategory:рхњрхќ f g = g РЌє f
  isCategory.unit-l-РЌє isCategory:рхњрхќ = unit-r-РЌє
  isCategory.unit-r-РЌє isCategory:рхњрхќ    = unit-l-РЌє       -- incl РЪе unit-l-РЌє РЪЕ
  isCategory.unit-2-РЌє isCategory:рхњрхќ    = unit-2-РЌє       -- incl РЪе unit-2-РЌє РЪЕ
  isCategory.assoc-l-РЌє isCategory:рхњрхќ   = assoc-r-РЌє      -- incl РЪе assoc-r-РЌє РЪЕ
  isCategory.assoc-r-РЌє isCategory:рхњрхќ   = assoc-l-РЌє      -- incl РЪе assoc-l-РЌє РЪЕ
  isCategory._РЌѕ_ isCategory:рхњрхќ (p) (q) = q РЌѕ p -- incl РЪе incl q РЌѕ incl p РЪЕ

_рхњрхќ : Category ­ЮЉќ -> Category ­ЮЉќ
_рхњрхќ ­Юњъ = РЪе ­Юњъ РЪЕ since isCategory:рхњрхќ
  -- where Op : isCategory РЪе ­Юњъ РЪЕ
  --       isCategory.Hom Op a b = Hom b a
  --       isCategory.isSetoid:Hom Op = isSetoid:Hom {{of ­Юњъ}}
  --       isCategory.id Op = id
  --       isCategory._РЌє_ Op f g = g РЌє f
  --       isCategory.unit-l-РЌє Op = unit-r-РЌє
  --       isCategory.unit-r-РЌє Op    = unit-l-РЌє       -- incl РЪе unit-l-РЌє РЪЕ
  --       isCategory.unit-2-РЌє Op    = unit-2-РЌє       -- incl РЪе unit-2-РЌє РЪЕ
  --       isCategory.assoc-l-РЌє Op   = assoc-r-РЌє      -- incl РЪе assoc-r-РЌє РЪЕ
  --       isCategory.assoc-r-РЌє Op   = assoc-l-РЌє      -- incl РЪе assoc-l-РЌє РЪЕ
  --       isCategory._РЌѕ_ Op (p) (q) = q РЌѕ p -- incl РЪе incl q РЌѕ incl p РЪЕ

module _ {­Юњъ : Category ­ЮЉќ} where
  рхњрхќрхњрхќ : (­Юњъ рхњрхќ рхњрхќ) РЅА-Str ­Юњъ
  рхњрхќрхњрхќ = refl-РЅБ
