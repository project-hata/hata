
module Verification.Core.Category.Std.Category.Structured.FiniteCoproduct.As.FiniteProduct where

open import Verification.Conventions hiding (_Ріћ_)
open import Verification.Core.Setoid
open import Verification.Core.Algebra.Monoid.Definition
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Opposite
open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Instance.Product
open import Verification.Core.Category.Std.Limit.Specific.Product
-- open import Verification.Core.Category.Std.Category.Structured.FiniteCoproduct.Definition
-- open import Verification.Core.Category.Std.Category.Structured.FiniteProduct.Definition
-- open import Verification.Core.Category.Std.Category.Structured.FiniteProduct.As.Monoid


module _ {­Юњъ : Category ­ЮЉќ} {{_ : hasFiniteCoproducts ­Юњъ}} where
  instance
    hasProducts:рхњрхќ : hasProducts (­Юњъ рхњрхќ)
    hasProducts._РіЊ_ hasProducts:рхњрхќ = _Ріћ_
    hasProducts.isProduct:РіЊ hasProducts:рхњрхќ = it

    hasTerminal:рхњрхќ : hasTerminal (­Юњъ рхњрхќ)
    hasTerminal.Ріц hasTerminal:рхњрхќ = РіЦ
    hasTerminal.isTerminal:Ріц hasTerminal:рхњрхќ = it
  instance
    hasFiniteProducts:рхњрхќ : hasFiniteProducts (­Юњъ рхњрхќ)
    hasFiniteProducts.hasTerminal:this hasFiniteProducts:рхњрхќ = hasTerminal:рхњрхќ
    hasFiniteProducts.hasProducts:this hasFiniteProducts:рхњрхќ = hasProducts:рхњрхќ
    -- hasFiniteProducts._РіЊ_ hasFiniteProducts:рхњрхќ = _Ріћ_
    -- hasFiniteProducts.isProduct:РіЊ hasFiniteProducts:рхњрхќ = it
    -- hasFiniteProducts.Ріц hasFiniteProducts:рхњрхќ = РіЦ
    -- hasFiniteProducts.isTerminal:Ріц hasFiniteProducts:рхњрхќ = it



