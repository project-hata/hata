
module Verification.Core.Category.Std.Category.Sized.Definition where

open import Verification.Conventions
open import Verification.Core.Setoid
open import Verification.Core.Set.Decidable
open import Verification.Core.Set.Discrete
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Order.WellFounded.Definition
open import Verification.Core.Category.Std.Limit.Specific.Coequalizer
open import Verification.Core.Computation.Unification.Definition


record isSizedCategory (ùíû : Category ùëñ) : ùí∞ (ùëñ ÔΩ§ ‚Ñì‚ÇÅ) where
  -- field {{isDiscrete:this}} : isDiscrete ‚ü® ùíû ‚ü©
  -- field {{isSet-Str:this}} : isSet-Str ‚ü® ùíû ‚ü©
  field SizeO : WFT0 (‚Ñì‚ÇÄ , ‚Ñì‚ÇÄ)
  field sizeO : ‚ü® ùíû ‚ü© -> ‚ü® SizeO ‚ü©

open isSizedCategory {{...}} public

SizedCategory : ‚àÄ ùëñ -> _
SizedCategory ùëñ = _ :& isSizedCategory {ùëñ}

record isSizedHomPairCategory (ùíû : SizedCategory ùëñ) : ùí∞ (ùëñ ÔΩ§ ‚Ñì‚ÇÅ) where
  field SizeC : WFT0 (‚Ñì‚ÇÄ , ‚Ñì‚ÇÄ)
  field sizeC : {a x : ‚ü® ùíû ‚ü©} -> (HomPair a x) -> ‚ü® SizeC ‚ü©
  field cong-sizeC : ‚àÄ{a x : ‚ü® ùíû ‚ü©} (f g : HomPair a x) -> f ‚àº g -> sizeC f ‚â£ sizeC g

open isSizedHomPairCategory {{...}} public

SizedHomPairCategory : ‚àÄ ùëñ -> _
SizedHomPairCategory ùëñ = _ :& isSizedHomPairCategory {ùëñ}


module _ {ùíû : ùí∞ _} {{_ : SizedCategory ùëñ on ùíû}} where
  record hasSizedCoequalizer {a b : ùíû} (f g : a ‚ü∂ b) : ùí∞ ùëñ where
    constructor _,_
    field hasCoequalizer:this : hasCoequalizer f g
    field sized-Coeq : isId (œÄ‚Çå) +-ùí∞ (sizeO ‚ü® hasCoequalizer:this ‚ü© ‚â™ sizeO b)

  open hasSizedCoequalizer public


  module _ {a b : ùíû} (f : HomPair a b) where
    hasSizedCoequalizerDecision : ùí∞ ùëñ
    hasSizedCoequalizerDecision = (¬¨ hasCoequalizerCandidate f) +-ùí∞ hasSizedCoequalizer (fst f) (snd f)

  module _ {{d : ‚àÄ{a b : ùíû} {f g : a ‚ü∂ b} -> hasSizedCoequalizerDecision (f , g)}} where

    hasUnification:byHasSizedCoequalizerDecision : hasUnification ‚Ä≤ ùíû ‚Ä≤
    hasUnification:byHasSizedCoequalizerDecision = record
      { unify = Œª f g ‚Üí case d {f = f} {g} of
                           left
                           Œª (x , _) ‚Üí right x
      }






