
module Verification.Core.Theory.FirstOrderTerm.Unification.SolutionSketch where

open import Verification.Conventions hiding (_‚äî_ ; ‚Ñï)

open import Verification.Core.Set.Discrete

open import Verification.Core.Algebra.Monoid.Definition

open import Verification.Core.Category.Std.Category.Subcategory.Full

open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Instance.Category
open import Verification.Core.Data.Substitution.Variant.Base.Definition

open import Verification.Core.Data.List.Variant.Binary.Natural
open import Verification.Core.Data.List.Variant.Binary.Definition
open import Verification.Core.Data.List.Variant.Binary.Element.Definition
open import Verification.Core.Data.List.VariantTranslation.Definition
open import Verification.Core.Data.List.Dependent.Variant.Binary.Definition

open import Verification.Core.Theory.FirstOrderTerm.Signature
open import Verification.Core.Theory.FirstOrderTerm
open import Verification.Core.Theory.FirstOrderTerm.Substitution.Definition
open import Verification.Core.Data.Language.HindleyMilner.Type.Variant.FirstOrderTerm.Signature
open import Verification.Core.Data.Language.HindleyMilner.Type.VariantTranslation.Definition
open import Verification.Core.Data.Language.HindleyMilner.Type.Variant.Direct.Definition

open import Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Imports hiding (unify ; [_])

open import Verification.Core.Data.Language.HindleyMilner.Variant.Classical.Typed.Type.Properties
private variable Œºs ŒΩs : ùêíùêÆùêõùê¨ùê≠-Sim Œ£-Sim

-- [Hide]
‚àë' = ‚àë_
infixl 5 ‚àë'
syntax ‚àë' (Œª x -> P) = ‚àë[ x ] P

postulate
  here : ‚àÄ{A : ùí∞ ùëñ} -> Text -> A

_[_] : ‚àÄ{Œ±s Œ≤s : ùêíùêÆùêõùê¨ùê≠-Sim Œ£-Sim} -> FOTerm Œ£-Sim ‚ü® Œ±s ‚ü© tt ->  Œ±s ‚ü∂ Œ≤s -> FOTerm Œ£-Sim ‚ü® Œ≤s ‚ü© tt
_[_] = Œª œÑ œÉ -> œÑ ‚áÉ[ œÉ ]‚áÇ
-- //

-- ==* A sketch of a solution
-- | Based on the problem description above, we present a simplified
--   unification algorithm --- again using terms from |FOTerm Œ£-Sim| for
--   the sake of concreteness. A very similar definition can already be found in
--   the original paper on categorical unification of \citeauthor{UnifyCat:RydeheardBurstall:1986}.
--   The same general approach, yet formulated differently, is the one taken
--   by \citet{UnifyForm:McBride:2000}.
--
-- | The algorithm has the following type [...,] We present it using
--   partially implemented Agda terms.
{-# TERMINATING #-}
unify : (t s : FOTerm Œ£-Sim ‚ü® Œºs ‚ü© tt) -> Maybe (‚àë[ ŒΩs ] (Œºs ‚ü∂ ŒΩs))
-- |> taking the terms |t| and |s|, both with variables from |Œºs| and returning
--   a new list of variables |ŒΩs|, as well as a substitution |Œºs ‚ü∂ ŒΩs|.
--   The intention is that this substitution should be the most general unifier
--   of |t| and |s|.
-- | An implementation in terms of recursion on both arguments is very
--   natural: Compare the topmost constructors; If either
--   of them is a variable, we are done. Otherwise they must both be
--   arrows, then recurse on their arguments.
-- | It is customary to denote the cases involving variables by /flex/
--   and the ones involving constructors by /rigid/, relating to the fact
--   that variables can be changed by substitutions, while constructors cannot.
-- | We examine the cases in more detail REF.
-- | - The flex-flex case.
unify (var Œ±) (var Œ≤) = {!!}
-- |> Here we need to check whether |Œ± ‚â° Œ≤| holds: if both
--    variables are the same, the most general unifier
--    is the identity substitution. Otherwise we return a substitution
--    which maps |Œ±| and |Œ≤| to the same variable; |ŒΩs| contains
--    one variable less than |Œºs|.

-- | - The rigid-flex cases.
unify (‚Ñï) (var Œ≤) = {!!}
unify (ùîπ) (var Œ≤) = {!!}
unify (t‚ÇÄ ‚áí t‚ÇÅ) (var Œ≤) = {!!}

-- |> When the rigid term is a constant without arguments, the
--    mgu is straightforward: substitute the variable |Œ≤| with that type constant.
--    If it is a term with arguments, the result depends on whether
--    the variable |Œ≤| occurs in either of |t‚ÇÄ| or |t‚ÇÅ|. If it does not,
--    proceed by substituting |Œ≤| like before. If it does, the result is that
--    no unifier exists. Intuitively, this is so because if we were to
--    substitute |Œ≤| by the term on the left hand side, that term,
--    itself containing |Œ≤|, would change as well. Meaning
--    that |(t‚ÇÄ ‚áí t‚ÇÅ) [ œÉ ] ‚â† Œ≤ [ œÉ ]|.

-- [Hide]
unify (var Œ±) (‚Ñï) = {!!}
unify (var Œ±) (ùîπ) = {!!}
unify (var Œ±) (t‚ÇÄ ‚áí t‚ÇÅ) = {!!}
-- //

-- | - The rigid-rigid case.

-- [Hide]
unify (ùîπ) (ùîπ) = {!!}
unify (‚Ñï) (ùîπ) = {!!}
unify (ùîπ) (‚Ñï) = {!!}
unify (‚Ñï) (‚Ñï) = {!!}
unify (ùîπ) (s‚ÇÄ ‚áí s‚ÇÅ) = {!!}
unify (‚Ñï) (s‚ÇÄ ‚áí s‚ÇÅ) = {!!}
unify (t‚ÇÄ ‚áí t‚ÇÅ) (ùîπ) = {!!}
unify (t‚ÇÄ ‚áí t‚ÇÅ) (‚Ñï) = {!!}
-- //

-- |> We ignore the sub-cases where either of the inputs are
--   type constants: the mgu is the identity substitution
--   if both inputs are the same, or it does not exist if they are
--   different.
-- | Instead, focus on the case where both inputs are arrows:

unify (t‚ÇÄ ‚áí t‚ÇÅ) (s‚ÇÄ ‚áí s‚ÇÅ) with unify t‚ÇÄ s‚ÇÄ
... | nothing = nothing
... | just (ŒΩs‚ÇÄ , œÉ‚ÇÄ) with unify (t‚ÇÅ [ œÉ‚ÇÄ ]) (s‚ÇÅ [ œÉ‚ÇÄ ])
... | nothing = nothing
... | just (ŒΩs‚ÇÅ , œÉ‚ÇÅ) = just (ŒΩs‚ÇÅ , œÉ‚ÇÄ ‚óÜ œÉ‚ÇÅ)

-- |> The reasoning behind this implementation is the following:
--   we want to solve the unification problem by solving the partial problems
--   of |t‚ÇÄ ‚âü t‚ÇÅ| and |s‚ÇÄ ‚âü s‚ÇÅ|, and then combining their solutions.
--   But as shown in the previous example,
--   the results of these partial solutions may influence each other.
--   If a variable is substituted in one branch of the execution, that must be taken
--   into account in the other branch, where that same variable may have
--   another occurence.
-- | The solution is remarkably simple: we solve the subproblems sequentially.
--   As seen in the implementation above, we first unify |t‚ÇÄ| and |t‚ÇÅ|.
--   If these terms have no mgu (the result is |nothing|),
--   than neither does our original pair (we also return |nothing|).
--   The crux of the algorithm is the case where unification of |t‚ÇÄ| and |s‚ÇÄ|
--   succeeds: The mgu of this pair is applied to both |t‚ÇÅ| and |s‚ÇÅ|
--   before these are unified. Afterwards, the only thing left is to compose the
--   two substitutions if successful, or return |nothing| if not.
-- |: Unfortunately, a verification of this implementation for the rigid-rigid
--   case is not immediate. The two problems that arise are:
-- | 1. Correctness needs to be shown. This is, in fact, the content of the "optimist's
--   lemma".
-- | 2. Termination of the algorithm is not obvious. When |unify| is
--      called the second time, its arguments have the substitution |œÉ‚ÇÄ|
--      applied. Such a substitution usually increases the size of terms,
--      which makes it unclear whether the resulting chain of recursive calls
--      ever terminates. In Agda, this problem is visible immediately,
--      as the termination checker complains about not being able to show termination.

-- |: {}

-- | A verification of the other cases, flex-flex and rigid-flex,
--   is of course also required. In the present formalization this
--   takes a rather traditional form, as for example described in REF.
--   Most of the rest of
--   this chapter therefore is devoted to describing the correctness and
--   termination of the rigid-rigid case in a purely categorical setting,
--   as well as to the translation of that proof back to
--   the concrete category of substitutions of first order terms.


