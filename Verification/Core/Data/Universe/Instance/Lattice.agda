
module Verification.Core.Data.Universe.Instance.Lattice where

open import Verification.Conventions

open import Verification.Core.Setoid.Definition
open import Verification.Core.Order.Preorder
open import Verification.Core.Order.Lattice
open import Verification.Core.Data.Sum.Definition
open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Instance.Setoid
open import Verification.Core.Data.Universe.Instance.Preorder

-- instance
  -- hasFiniteJoins:๐ฐ : hasFiniteJoins โฒ ๐ฐ ๐ โฒ
  -- hasFiniteJoins.โฅ         hasFiniteJoins:๐ฐ = โฅ-๐ฐ
  -- hasFiniteJoins.initial-โฅ hasFiniteJoins:๐ฐ = incl $ ฮป {()}
  -- hasFiniteJoins._โจ_       hasFiniteJoins:๐ฐ = _+-๐ฐ_
  -- hasFiniteJoins.ฮนโ-โจ      hasFiniteJoins:๐ฐ = incl left
  -- hasFiniteJoins.ฮนโ-โจ      hasFiniteJoins:๐ฐ = incl right
  -- hasFiniteJoins.[_,_]-โจ   hasFiniteJoins:๐ฐ f g = incl $ either โจ f โฉ โจ g โฉ

-- instance
--   hasFiniteMeets:๐ฐ : hasFiniteMeets โฒ ๐ฐ ๐ โฒ
--   hasFiniteMeets:๐ฐ = record
--     { โค = โค-๐ฐ
--     ; terminal-โค = incl (ฮป x โ tt)
--     ; _โง_ = _ร-๐ฐ_
--     ; ฯโ-โง = incl fst
--     ; ฯโ-โง = incl snd
--     ; โจ_,_โฉ-โง = ฮป f g -> incl (ฮป x โ (โจ f โฉ x , โจ g โฉ x))
--     }


