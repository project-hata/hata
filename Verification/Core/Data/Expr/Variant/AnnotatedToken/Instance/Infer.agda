
module Verification.Core.Data.Expr.Variant.AnnotatedToken.Instance.Infer where

open import Verification.Conventions hiding (‚Ñï)

open import Verification.Core.Data.Nat.Definition
open import Verification.Core.Setoid.Definition
open import Verification.Core.Setoid.Instance.Category

open import Verification.Core.Algebra.AllOf.Pointed

open import Verification.Core.Data.AllOf.Collection.Basics
open import Verification.Core.Data.AllOf.Collection.TermTools
-- open import Verification.Core.Data.AllOf.Product
-- open import Verification.Core.Data.AllOf.Sum
-- open import Verification.Core.Data.Expr.Variant.Base.Definition
-- open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Instance.Category

open import Verification.Core.Category.Std.AllOf.Collection.Basics
open import Verification.Core.Category.Std.AllOf.Collection.Limits
-- open import Verification.Core.Category.Std.Category.Definition
-- open import Verification.Core.Category.Std.Category.Opposite
-- open import Verification.Core.Category.Std.Category.Construction.Product
-- open import Verification.Core.Category.Std.Category.Instance.Category
-- open import Verification.Core.Category.Std.Category.Instance.FiniteProductCategory
-- open import Verification.Core.Category.Std.Limit.Specific.Product
-- open import Verification.Core.Category.Std.Limit.Specific.Product.Instance.Functor
-- open import Verification.Core.Category.Std.Functor.Definition
-- open import Verification.Core.Category.Std.Functor.Constant
-- open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Setoid.As.Category
open import Verification.Core.Setoid.Discrete
open import Verification.Core.Setoid.Definition

open import Verification.Core.Category.Std.Monad.Definition
open import Verification.Core.Category.Std.Monad.Instance.Category
open import Verification.Core.Category.Std.Monad.Instance.LargeCategory
open import Verification.Core.Category.Std.Category.Subcategory.Definition
open import Verification.Core.Theory.Std.Inference.Definition
open import Verification.Core.Theory.Std.Inference.Task


open import Verification.Core.Data.Expr.Variant.AnnotatedList.Definition
open import Verification.Core.Data.Expr.Variant.AnnotatedList.Instance.Monad
-- open import Verification.Core.Data.Expr.Variant.AnnotatedList.Instance.Infer

open import Verification.Core.Data.Expr.Variant.AnnotatedToken.Data
open import Verification.Core.Data.Expr.Variant.AnnotatedToken.Definition
open import Verification.Core.Data.Expr.Variant.AnnotatedToken.Instance.Monad


instance
  IShow:ATokenExprAnn·µà : IShow ATokenExprAnn·µà
  IShow:ATokenExprAnn·µà = record { show = lem-1 }
    where
      lem-1 : ATokenExprAnn·µà ‚Üí Text
      lem-1 isvar = "var"
      lem-1 istoken = "token"
      lem-1 iscall = "call"


module _ {ùíπ : ATokenExprData} {Ann : ùêèùê≠ùêù‚ÇÄ} where

  private
    Ann' : ùêèùê≠ùêù‚ÇÄ
    Ann' = Ann √ó ATokenExprAnn

  ----------------------------------------------------------
  -- printing the tokenExpressions to listExpressions
  mutual
    print-ATokenExpr·µòs : ‚àÄ{X n} -> ConstList·¥∞ (ATokenExpr ùíπ Ann X) n -> List (AListExpr (Ann') X)
    print-ATokenExpr·µòs [] = []
    print-ATokenExpr·µòs (x ‚à∑ xs) = print-ATokenExpr·µò x ‚à∑ print-ATokenExpr·µòs xs

    print-ATokenExpr·µò : ‚àÄ{X} -> ATokenExpr ùíπ Ann X -> AListExpr Ann' X
    print-ATokenExpr·µò (var ann x) = var (ann , (just isvar)) x
    print-ATokenExpr·µò (hole x) = hole x
    print-ATokenExpr·µò (token ann x) = var (ann , (just istoken)) (tokenName ùíπ x)
    print-ATokenExpr·µò (list ann x) = list (ann , (just iscall)) (print-ATokenExpr·µòs x)
    -- print-ATokenExpr·µò (annotation t x) = annotation t (print-ATokenExpr·µò x)

  print-ATokenExpr : Â§ßMonadHom (_ , ATokenExpr ùíπ Ann) (_ , AListExpr Ann')
  print-ATokenExpr = record { fst = id ; snd = (Œª _ -> print-ATokenExpr·µò) since {!!} }

  ----------------------------------------------------------
  -- parsing the tokenExpressions from listExpressions

  private
    findToken : Text -> Maybe (TokenType ùíπ)
    findToken name with filter (Œª x ‚Üí tokenName ùíπ x ‚âü name) (tokenList ùíπ)
    ... | [] = nothing
    ... | x ‚à∑ [] = just x
    ... | x ‚à∑ x‚ÇÅ ‚à∑ X = just x

  mutual
    parse-ATokenExprs : ‚àÄ{X} -> List (AListExpr Ann' X) -> ‚àë ConstList·¥∞ (ATokenExpr ùíπ Ann (AListExpr Ann' X))
    parse-ATokenExprs [] = _ , []
    parse-ATokenExprs (x ‚à∑ xs) = (tt ‚à∑ _) , parse-ATokenExpr x ‚à∑ parse-ATokenExprs xs .snd

    parse-ATokenExpr : ‚àÄ{X} -> AListExpr Ann' X -> ATokenExpr ùíπ Ann (AListExpr Ann' X)
    parse-ATokenExpr (var (ann , _) x) = case findToken x of
                                     (Œª _ -> var ann x)
                                     Œª x ‚Üí token ann x
    parse-ATokenExpr (hole x) = hole (hole x)
    parse-ATokenExpr (list (ann , _) x) = list ann (parse-ATokenExprs x .snd)

    -- parse-ATokenExpr (annotation t x) = annotation t (parse-ATokenExpr x)

  isInferHom:print-ATokenExpr : isInferHom (print-ATokenExpr)
  isInferHom:print-ATokenExpr = record
    { inferF = id
    ; infer = (Œª _ -> parse-ATokenExpr) since {!!}
    ; eval-infer = {!!}
    }

  infer-TokenExpr : ATokenExprInfer ùíπ Ann ‚ü∂ AListExprInfer Ann'
  infer-TokenExpr = (subcathom print-ATokenExpr isInferHom:print-ATokenExpr)



  -- the inference task

  ATokenExprInferenceTask : {{_ : IShow ‚ü® Ann ‚ü©}} -> InferenceTask _
  ATokenExprInferenceTask = inferenceTask (AListExprInfer Ann') (hasTextInfer:AListExprInfer)
                                          (ATokenExprInfer ùíπ Ann)
                                          infer-TokenExpr


