
module Verification.Core.Data.FiniteIndexed.Property.Merge where

open import Verification.Core.Conventions hiding (_‚äî_ ; ‚Ñï)

open import Verification.Core.Setoid.Definition
open import Verification.Core.Set.Set.Definition
open import Verification.Core.Set.Function.Injective
open import Verification.Core.Set.Discrete
open import Verification.Core.Set.Contradiction
-- open import Verification.Core.Set.Set.Instance.Category
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Morphism.Iso
open import Verification.Core.Category.Std.Morphism.EpiMono
open import Verification.Core.Category.Std.Functor.Image
open import Verification.Core.Category.Std.Functor.Adjoint
open import Verification.Core.Category.Std.Category.Structured.SeparatingFamily

open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Instance.Category
open import Verification.Core.Data.Universe.Instance.FiniteCoproductCategory
open import Verification.Core.Data.Universe.Instance.SeparatingFamily

open import Verification.Core.Data.Nat.Definition
open import Verification.Core.Data.Nat.Instance.Monoid
open import Verification.Core.Data.List.Variant.Binary.Natural
open import Verification.Core.Data.Indexed.Definition
open import Verification.Core.Data.Indexed.Xiix
open import Verification.Core.Data.Indexed.Instance.Monoid
open import Verification.Core.Data.Indexed.Instance.FiniteCoproductCategory
open import Verification.Core.Data.Indexed.Instance.SeparatingFamily

open import Verification.Core.Algebra.Monoid.Definition
open import Verification.Core.Algebra.Monoid.Free
open import Verification.Core.Data.List.Variant.Binary.Element.Definition
open import Verification.Core.Data.List.Variant.Binary.Element.Instance.Functor
open import Verification.Core.Data.List.Variant.Binary.Element.As.Indexed
open import Verification.Core.Data.List.Variant.Binary.Element.Properties
open import Verification.Core.Data.List.Variant.Binary.Natural
open import Verification.Core.Data.List.Variant.Binary.Misc
open import Verification.Core.Data.List.Variant.Binary.Definition
open import Verification.Core.Data.List.Variant.Binary.Instance.Monoid

open import Verification.Core.Category.Std.Category.Subcategory.Full
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Instance.Functor
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Preservation.Definition
open import Verification.Core.Category.Std.Category.Subcategory.Full.Construction.Coproduct

open import Verification.Core.Data.FiniteIndexed.Definition

private
  lem-0 : ‚àÄ{A : ùí∞ ùëñ} -> (f g : ¬¨ A) -> f ‚â£ g
  lem-0 f g = ‚â°‚Üí‚â°-Str (funExt Œª x ‚Üí impossible (f x))


module _ {A : ùí∞ ùëñ} where
  data _‚â†-‚àç_ : ‚àÄ{as : ‚ãÜList A} {a b : A} (la : as ‚àç a) (lb : as ‚àç b) -> ùí∞ ùëñ where
    ‚â†-‚àç:bySort : ‚àÄ{x a b la lb} -> ¬¨ a ‚â£ b -> _‚â†-‚àç_ {incl x} {a} {b} (la) (lb)
    ‚â†-‚àç:left  : ‚àÄ{as bs : ‚ãÜList A} -> {a b : A} -> {la : as ‚àç a} {lb : as ‚àç b} -> la ‚â†-‚àç lb -> left-‚àç {b = bs} la ‚â†-‚àç left-‚àç lb
    ‚â†-‚àç:right : ‚àÄ{as bs : ‚ãÜList A} -> {a b : A} -> {la : as ‚àç a} {lb : as ‚àç b} -> la ‚â†-‚àç lb -> right-‚àç {a = bs} la ‚â†-‚àç right-‚àç lb
    ‚â†-‚àç:left-right : ‚àÄ{as bs : ‚ãÜList A} -> {a b : A} -> {la : as ‚àç a} {lb : bs ‚àç b} -> left-‚àç la ‚â†-‚àç right-‚àç lb
    ‚â†-‚àç:right-left : ‚àÄ{as bs : ‚ãÜList A} -> {a b : A} -> {la : bs ‚àç a} {lb : as ‚àç b} -> right-‚àç la ‚â†-‚àç left-‚àç lb

  -- data _=-‚àç_ : ‚àÄ{as : ‚ãÜList A} {a b : A} (la : as ‚àç a) (lb : as ‚àç b) -> ùí∞ ùëñ where
  --   refl-‚â£-2 : ‚àÄ{as} {a : A} {la : as ‚àç a} -> la =-‚àç la

  record _=-‚àç_ {as : ‚ãÜList A} {a b : A} (la : as ‚àç a) (lb : as ‚àç b) : ùí∞ ùëñ where
    constructor _,_
    field fst : a ‚â£ b
    field snd : transport-Str (cong-Str (Œª Œæ -> as ‚àç Œæ) fst) la ‚â£ lb

  open _=-‚àç_ public


pattern refl-‚â£-2 = refl-‚â£ , refl-‚â£

module _ {A : ùí∞ ùëñ} where
  cancel-injective-ùí∞-=-‚àç-right-‚àç : ‚àÄ{as bs : ‚ãÜList A} {a b : A} {la : as ‚àç a} {lb : as ‚àç b} -> (right-‚àç {a = bs} la =-‚àç right-‚àç {a = bs} lb) -> la =-‚àç lb
  cancel-injective-ùí∞-=-‚àç-right-‚àç refl-‚â£-2 = refl-‚â£-2

  cancel-injective-ùí∞-=-‚àç-left-‚àç : ‚àÄ{as bs : ‚ãÜList A} {a b : A} {la : as ‚àç a} {lb : as ‚àç b} -> (left-‚àç {b = bs} la =-‚àç left-‚àç {b = bs} lb) -> la =-‚àç lb
  cancel-injective-ùí∞-=-‚àç-left-‚àç refl-‚â£-2 = refl-‚â£-2


  isProp:‚â†-‚àç : ‚àÄ{as : ‚ãÜList A} {a b : A} -> {la : as ‚àç a} {lb : as ‚àç b} -> (p q : la ‚â†-‚àç lb) -> p ‚â£ q
  isProp:‚â†-‚àç (‚â†-‚àç:bySort x) (‚â†-‚àç:bySort x‚ÇÅ) = cong-Str ‚â†-‚àç:bySort (lem-0 _ _)
  isProp:‚â†-‚àç (‚â†-‚àç:left p) (‚â†-‚àç:left q) = cong-Str ‚â†-‚àç:left (isProp:‚â†-‚àç p q)
  isProp:‚â†-‚àç (‚â†-‚àç:right p) (‚â†-‚àç:right q) = cong-Str ‚â†-‚àç:right (isProp:‚â†-‚àç p q)
  isProp:‚â†-‚àç ‚â†-‚àç:left-right ‚â†-‚àç:left-right = refl-‚â£
  isProp:‚â†-‚àç ‚â†-‚àç:right-left ‚â†-‚àç:right-left = refl-‚â£

  -- cong-=-‚àç-right : ‚àÄ{as bs : ‚ãÜList A} {a b : A} {la : as ‚àç a} {lb : as ‚àç b} -> la =-‚àç lb -> right-‚àç {a = bs} la =-‚àç right-‚àç {a = bs} lb
  -- cong-=-‚àç-right (refl-‚â£-2) = refl-‚â£-2

  =-‚àç‚Üí‚â£ : ‚àÄ{as : ‚ãÜList A} {a b : A} {la : as ‚àç a} {lb : as ‚àç b} -> (la =-‚àç lb) -> a ‚â£ b
  =-‚àç‚Üí‚â£ refl-‚â£-2 = refl-‚â£

  transport‚Åª¬π-=-‚àç : ‚àÄ{as : ‚ãÜList A} {a b : A} {la : as ‚àç a} {lb : as ‚àç b} -> (P : A -> ùí∞ ùëó) -> (la =-‚àç lb) -> P b -> P a
  transport‚Åª¬π-=-‚àç P p x = transport-Str (cong-Str P (sym-‚â£ (=-‚àç‚Üí‚â£ p))) x

  private
    skip-‚àç : ‚àÄ{as : ‚ãÜList A} {a : A} {la : as ‚àç a} -> (la ‚â†-‚àç la) -> ‚ä•-ùí∞ {‚Ñì‚ÇÄ}
    skip-‚àç (‚â†-‚àç:bySort x) = impossible (x refl-‚â£)
    skip-‚àç (‚â†-‚àç:left p) = skip-‚àç p
    skip-‚àç (‚â†-‚àç:right p) = skip-‚àç p

    compare-‚àç : ‚àÄ{as : ‚ãÜList A} {a b : A} {la : as ‚àç a} {lb : as ‚àç b} -> (la =-‚àç lb) √ó-ùí∞ (la ‚â†-‚àç lb) -> ‚ä•-ùí∞ {‚Ñì‚ÇÄ}
    compare-‚àç (refl-‚â£-2 , q) = skip-‚àç q

  instance
    isContradiction:‚â†-‚àç : ‚àÄ{as : ‚ãÜList A} {a : A} {la : as ‚àç a} -> isContradiction (la ‚â†-‚àç la)
    isContradiction:‚â†-‚àç = contradiction skip-‚àç

  instance
    isContradiction:=-‚àç,‚â†-‚àç : ‚àÄ{as : ‚ãÜList A} {a b : A} {la : as ‚àç a} {lb : as ‚àç b} -> isContradiction ((la =-‚àç lb) √ó-ùí∞ (la ‚â†-‚àç lb))
    isContradiction:=-‚àç,‚â†-‚àç = contradiction compare-‚àç

  -- private
  --   lem-001 : ‚àÄ{as : ‚ãÜList A} {a b : A} {la : as ‚àç a} {lb : as ‚àç b} -> (p0 : a ‚â£ b) -> (p : la =-‚àç lb) -> p ‚â£ transport-Str (cong-Str (Œª Œæ -> as ‚àç Œæ) p0) refl-‚â£-2
  --   lem-001 = ?

 -- {{_ : isDiscrete A}}
module _ {A : ùí∞ ùëñ} {{_ : isSet-Str A}} where

  transport‚Åª¬π-=-‚àç-refl : ‚àÄ{as : ‚ãÜList A} {a : A} {la : as ‚àç a} -> (P : A -> ùí∞ ùëó) -> (p : la =-‚àç la) -> (x : P a) -> transport‚Åª¬π-=-‚àç P p x ‚â£ x
  transport‚Åª¬π-=-‚àç-refl P p x =
    let P0 : StrId (transport-Str (cong-Str P (sym-‚â£ (refl-‚â£))) x) x
        P0 = refl-‚â£

        P1 : StrId (transport-Str (cong-Str P (sym-‚â£ (=-‚àç‚Üí‚â£ p))) x) x
        P1 = transport-Str (cong-Str (Œª Œæ -> StrId (transport-Str (cong-Str P (sym-‚â£ (Œæ))) x) x) (isset-Str refl-‚â£ (=-‚àç‚Üí‚â£ p))) P0
    in P1

  -- we want to show this by deconstructing an =-‚àç statement into two path statements
  -- isProp-=-‚àç : ‚àÄ{as : ‚ãÜList A} {a : A} {b : A} {la : as ‚àç a} {lb : as ‚àç b} -> (p q : la =-‚àç lb) -> p ‚â£ q
  -- isProp-=-‚àç = {!!}

  -- isProp-=-‚àç refl-‚â£-2 q = {!!}
  --   where
  --     lem-1 : {a : A} {b : A} {la : as ‚àç a} {lb : as ‚àç b} -> (p : a ‚â£ b) -> (q : la =-‚àç lb) -> q ‚â£ transport-Str (cong (Œª Œæ -> ))


  _\\_ : (as : ‚ãÜList A) -> {a : A} -> (as ‚àç a) -> ‚ãÜList A
  incl x \\ incl = ‚óå
  (as ‚ãÜ-‚ßú bs) \\ right-‚àç x = as ‚ãÜ (bs \\ x)
  (as ‚ãÜ-‚ßú bs) \\ left-‚àç x = (as \\ x) ‚ãÜ bs

  _\\'_ : (as : ùêÖùê¢ùêßùêàùê± A) -> {a : A} -> (‚ü® as ‚ü© ‚àç a) -> ùêÖùê¢ùêßùêàùê± A
  _\\'_ as x = incl (‚ü® as ‚ü© \\ x)

  Œπ-\\ : ‚àÄ{as : ‚ãÜList A} -> {a : A} -> (x : as ‚àç a) -> ùëíùëô (as \\ x) ‚ü∂ ùëíùëô as
  Œπ-\\ (right-‚àç x) p (right-‚àç y) = right-‚àç (Œπ-\\ x p y)
  Œπ-\\ (right-‚àç x) p (left-‚àç y) = left-‚àç y
  Œπ-\\ (left-‚àç x) p (right-‚àç y) = right-‚àç y
  Œπ-\\ (left-‚àç x) p (left-‚àç y) = left-‚àç (Œπ-\\ x p y)

  single-‚àç : ‚àÄ{as : ‚ãÜList A} -> {a : A} -> (x : as ‚àç a) -> ùëíùëô (incl a) ‚ü∂ ùëíùëô as
  single-‚àç x i incl = x

  module ¬ß-\\ where
    prop-1 : ‚àÄ{as : ‚ãÜList A} -> {a : A} -> {ap : as ‚àç a} -> ‰∫∫length as ‚â£ suc (‰∫∫length (as \\ ap))
    prop-1 {.(incl a)} {a} {incl} = refl-‚â£
    prop-1 {as ‚ãÜ-‚ßú bs} {a} {right-‚àç ap} = refl ‚âÄ‚ãÜ‚âÄ prop-1 {ap = ap} ‚àô (+-suc (‰∫∫length as) (‰∫∫length (bs \\ ap)))
    prop-1 {as ‚ãÜ-‚ßú bs} {a} {left-‚àç ap} = prop-1 {ap = ap} ‚âÄ‚ãÜ‚âÄ refl
    -- Œª i -> prop-1 {ap = ap} i +-‚Ñï ‰∫∫length bs


  -- private
  --   skip-‚àç : ‚àÄ{as : ‚ãÜList A} {a b : A} -> (la : as ‚àç a) -> (¬¨ a ‚â£ b) -> as ‚àç b -> (as \\ la) ‚àç b
  --   skip-‚àç incl a‚â†b incl = impossible (a‚â†b refl-‚â£)
  --   skip-‚àç (right-‚àç la) a‚â†b (right-‚àç lb) = right-‚àç (skip-‚àç la a‚â†b lb)
  --   skip-‚àç (left-‚àç la) a‚â†b (right-‚àç lb) = right-‚àç lb
  --   skip-‚àç (right-‚àç la) a‚â†b (left-‚àç lb) = left-‚àç lb
  --   skip-‚àç (left-‚àç la) a‚â†b (left-‚àç lb) = left-‚àç (skip-‚àç la a‚â†b lb)

  --   compare-‚àç-0 : ‚àÄ{a b : A} -> (p : a ‚â£ b) -> (la : incl b ‚àç a) -> la ‚â£ (transport-Str (cong-Str (Œª Œæ -> incl Œæ ‚àç a) p) incl)
  --   compare-‚àç-0 p incl = {!!}

  --   compare-‚àç : ‚àÄ{as : ‚ãÜList A} {a : A} -> (la lb : as ‚àç a) -> (¬¨ la ‚â£ lb) -> (as \\ la) ‚àç a
  --   compare-‚àç incl lb a‚â†b = impossible (a‚â†b (sym-‚â£ (compare-‚àç-0 refl-‚â£ lb)))
  --   compare-‚àç (right-‚àç la) (right-‚àç lb) a‚â†b = right-‚àç (compare-‚àç la lb (Œª p -> a‚â†b (cong-Str right-‚àç p)))
  --   compare-‚àç (right-‚àç la) (left-‚àç lb) a‚â†b = left-‚àç lb
  --   compare-‚àç (left-‚àç la) (right-‚àç lb) a‚â†b = right-‚àç lb
  --   compare-‚àç (left-‚àç la) (left-‚àç lb) a‚â†b = left-‚àç ((compare-‚àç la lb (Œª p -> a‚â†b (cong-Str left-‚àç p))))

  skip-‚àç : ‚àÄ{as : ‚ãÜList A} {a b : A} -> (la : as ‚àç a) -> (lb : as ‚àç b) -> (la ‚â†-‚àç lb) -> (as \\ lb) ‚àç a
  skip-‚àç incl incl (‚â†-‚àç:bySort x) = impossible (x refl-‚â£)
  skip-‚àç (right-‚àç la) (right-‚àç lb) (‚â†-‚àç:right p) = right-‚àç (skip-‚àç la lb p)
  skip-‚àç (right-‚àç la) (left-‚àç lb) ‚â†-‚àç:right-left = right-‚àç la
  skip-‚àç (left-‚àç la) (right-‚àç lb) ‚â†-‚àç:left-right = left-‚àç la
  skip-‚àç (left-‚àç la) (left-‚àç lb) (‚â†-‚àç:left p) = left-‚àç (skip-‚àç la lb p)

  compare-‚àç : ‚àÄ{as : ‚ãÜList A} {a b : A} -> (la : as ‚àç a) -> (lb : as ‚àç b) -> (la ‚â†-‚àç lb) +-ùí∞ (la =-‚àç lb)
  compare-‚àç incl incl = right (refl-‚â£-2)
  compare-‚àç (right-‚àç la) (right-‚àç lb) with compare-‚àç la lb
  ... | left x = left (‚â†-‚àç:right x)
  ... | just (refl-‚â£-2) = right (refl-‚â£-2)
  compare-‚àç (right-‚àç la) (left-‚àç lb) = left ‚â†-‚àç:right-left
  compare-‚àç (left-‚àç la) (right-‚àç lb) = left ‚â†-‚àç:left-right
  compare-‚àç (left-‚àç la) (left-‚àç lb) with compare-‚àç la lb
  ... | left x = left (‚â†-‚àç:left x)
  ... | just refl-‚â£-2 = just refl-‚â£-2

  œÄ-\\ : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} -> {a : A} -> (x : ‚ü® as ‚ü© ‚àç a) -> (y : ‚ü® as ‚ü© ‚àç a) -> (y ‚â†-‚àç x) -> as ‚ü∂ (as \\' x)
  ‚ü® œÄ-\\ x y y‚â†x ‚ü© i q with compare-‚àç q x
  ... | left q‚â†x = skip-‚àç q x q‚â†x
  ... | just r =
    let rr = skip-‚àç y x y‚â†x
    in transport‚Åª¬π-=-‚àç _ r rr
  -- ... | just refl-‚â£-2 = skip-‚àç y x y‚â†x

  private
    -- lem-3 : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a b : A} -> {x : ‚ü® as ‚ü© ‚àç a} -> {x' : ‚ü® as ‚ü© ‚àç b} -> (x =-‚àç x') -> {y : ‚ü® as ‚ü© ‚àç a} -> (p : y ‚â†-‚àç x) -> ‚ü® œÄ-\\ x y p ‚ü© b x' ‚â£ skip-‚àç y x p
    lem-3 : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a : A} -> {x : ‚ü® as ‚ü© ‚àç a}  -> {y : ‚ü® as ‚ü© ‚àç a} -> (p : y ‚â†-‚àç x) -> ‚ü® œÄ-\\ x y p ‚ü© a x ‚â£ skip-‚àç y x p
    lem-3 {a = a} {x} {y} p with compare-‚àç x x
    ... | left q = impossible q
    ... | just p = transport‚Åª¬π-=-‚àç-refl _ p _

    lem-4 : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a : A} -> {x : ‚ü® as ‚ü© ‚àç a}  -> {y : ‚ü® as ‚ü© ‚àç a} -> (p : y ‚â†-‚àç x) -> ‚ü® œÄ-\\ x y p ‚ü© a y ‚â£ skip-‚àç y x p
    lem-4 {a = a} {x} {y} (y‚â†x) with compare-‚àç y x
    ... | left x‚ÇÅ = cong-Str (Œª Œæ -> skip-‚àç y x Œæ) (isProp:‚â†-‚àç _ _)
    ... | just y=x = impossible (y=x , y‚â†x)

  œÄ-\\-‚àº : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a : A} -> {x : ‚ü® as ‚ü© ‚àç a} -> {y : ‚ü® as ‚ü© ‚àç a} -> (p : y ‚â†-‚àç x) -> ‚ü® œÄ-\\ x y p ‚ü© a x ‚â£ ‚ü® œÄ-\\ x y p ‚ü© a y
  œÄ-\\-‚àº {a = a} {x} {y} p = lem-3 p ‚àô-‚â£ sym-‚â£ (lem-4 p)

  module ¬ß-Œπ-\\ where
    prop-1 : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a : A} -> {x : ‚ü® as ‚ü© ‚àç a} -> ‚àÄ{b : A} -> {z : ‚ü® as ‚ü© ‚àç b} -> (p : z ‚â†-‚àç x) -> Œπ-\\ x b (skip-‚àç z x p) ‚â£ z
    prop-1 {x = incl} {z = incl} (‚â†-‚àç:bySort x) = impossible (x refl-‚â£)
    prop-1 {x = right-‚àç x} {z = right-‚àç y} (‚â†-‚àç:right p) = cong-Str right-‚àç (prop-1 p)
    prop-1 {x = right-‚àç x} {z = left-‚àç y} ‚â†-‚àç:left-right = refl-‚â£
    prop-1 {x = left-‚àç x} {z = right-‚àç y} ‚â†-‚àç:right-left = refl-‚â£
    prop-1 {x = left-‚àç x} {z = left-‚àç y} (‚â†-‚àç:left p) = cong-Str left-‚àç (prop-1 p)

    prop-2 : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a : A} -> {x : ‚ü® as ‚ü© ‚àç a} -> ‚àÄ{b : A} -> {z : (‚ü® as ‚ü© \\ x) ‚àç b} -> (p : (Œπ-\\ x b z) ‚â†-‚àç x) -> (skip-‚àç (Œπ-\\ x b z) x p) ‚â£ z
    prop-2 {x = right-‚àç x} {z = right-‚àç z} (‚â†-‚àç:right p) = cong-Str right-‚àç (prop-2 p)
    prop-2 {x = right-‚àç x} {z = left-‚àç z} ‚â†-‚àç:left-right = refl-‚â£
    prop-2 {x = left-‚àç x} {z = right-‚àç z} ‚â†-‚àç:right-left = refl-‚â£
    prop-2 {x = left-‚àç x} {z = left-‚àç z} (‚â†-‚àç:left p)    = cong-Str left-‚àç (prop-2 p)

    prop-3 : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a : A} -> {x : ‚ü® as ‚ü© ‚àç a} -> {z : (‚ü® as ‚ü© \\ x) ‚àç a} -> (Œπ-\\ x a z ‚â£ x) -> ùüò-ùí∞
    prop-3 {x = right-‚àç x} {z = right-‚àç z} p = prop-3 (‚â°‚Üí‚â°-Str (cancel-injective-ùí∞ (‚â°-Str‚Üí‚â° p)))
    prop-3 {x = left-‚àç x} {z = left-‚àç z} p   = prop-3 (‚â°‚Üí‚â°-Str (cancel-injective-ùí∞ (‚â°-Str‚Üí‚â° p)))

    -- ¬ß-Œπ-\\.prop-2 : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a : A} -> {x : ‚ü® as ‚ü© ‚àç a} -> ‚àÄ{b : A} -> {z : ‚ü® as ‚ü© ‚àç b} -> (p : z ‚â†-‚àç x) -> Œπ-\\ x b (skip-‚àç z x p) ‚â£ z
    -- ¬ß-Œπ-\\.prop-2 = ?

  merge-embed : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a : A} -> {x : ‚ü® as ‚ü© ‚àç a} -> {y : ‚ü® as ‚ü© ‚àç a} -> (p : y ‚â†-‚àç x) -> ‚àÄ{b : A} -> (z : ‚ü® as ‚ü© ‚àç b) -> (Œπ-\\ x b (‚ü® œÄ-\\ x y p ‚ü© b z) ‚â£ z) +-ùí∞ (z =-‚àç x)
  merge-embed {x = x} p z with compare-‚àç z x
  ... | left p2 = left (¬ß-Œπ-\\.prop-1 p2)
  ... | just p2 = right p2

  merge-single : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a : A} -> {x : ‚ü® as ‚ü© ‚àç a} -> {y : ‚ü® as ‚ü© ‚àç a} -> (p : y ‚â†-‚àç x) -> (Œπ-\\ x a (‚ü® œÄ-\\ x y p ‚ü© a x) ‚â£ y)
  merge-single {as} {a} {x = x} {y} p with compare-‚àç x x
  ... | left x‚â†x = impossible x‚â†x
  ... | just p2 = P
    where

      P9 : StrId
            (Œπ-\\ x a
            (transport-Str
              (cong-Str (_‚àç_ (‚ü® as ‚ü© \\ x)) (refl-‚â£))
              (skip-‚àç y x p)))
            y
      P9 = ¬ß-Œπ-\\.prop-1 p

      P : StrId
            (Œπ-\\ x a
            (transport-Str
              (cong-Str (_‚àç_ (‚ü® as ‚ü© \\ x)) (sym-‚â£ (=-‚àç‚Üí‚â£ p2)))
              (skip-‚àç y x p)))
            y
      P = transport-Str (cong-Str {a = refl-‚â£} {b = sym-‚â£ (=-‚àç‚Üí‚â£ p2)} (Œª Œæ ->
            StrId
              (Œπ-\\ x a
              (transport-Str
                (cong-Str (_‚àç_ (‚ü® as ‚ü© \\ x)) (Œæ))
                (skip-‚àç y x p)))
              y)
              (isset-Str _ _)) P9



    -- let X : (Œπ-\\ x a (transport‚Åª¬π-=-‚àç (_‚àç_ (FullSubcategory.‚ü® as ‚ü© \\ x)) p2 (skip-‚àç y x p)))
    --   y
    --     X = (¬ß-Œπ-\\.prop-1 p)
    -- in ?

  private

    lem-7 : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a : A} -> {x : ‚ü® as ‚ü© ‚àç a} -> ‚àÄ{b : A} -> {z : (‚ü® as ‚ü© \\ x) ‚àç b} -> (p : (Œπ-\\ x b z) =-‚àç x) -> ùüò-ùí∞
    lem-7 {x = right-‚àç x} {z = right-‚àç z} (refl-‚â£ , q) = lem-7 (cancel-injective-ùí∞-=-‚àç-right-‚àç (refl-‚â£ , q))
    lem-7 {x = left-‚àç x} {z = left-‚àç z} (refl-‚â£ , q)   = lem-7 (cancel-injective-ùí∞-=-‚àç-left-‚àç (refl-‚â£ , q))


  embed-merge : ‚àÄ{as : ùêÖùê¢ùêßùêàùê± A} {a : A} -> {x : ‚ü® as ‚ü© ‚àç a} -> {y : ‚ü® as ‚ü© ‚àç a} -> (p : y ‚â†-‚àç x) -> ‚àÄ{b : A} -> ‚àÄ z -> ((‚ü® œÄ-\\ x y p ‚ü© b (Œπ-\\ x b z)) ‚â£ z)
  embed-merge {as} {a} {x} {y} p {b} z with compare-‚àç (Œπ-\\ x b z) x in q
  ... | left q = ¬ß-Œπ-\\.prop-2 q
  ... | just r = impossible (lem-7 r)


  iso-\\ : ‚àÄ{as : ‚ãÜList A} -> {a : A} -> (x : as ‚àç a) -> ùëíùëô as ‚ü∂ ùëíùëô ((as \\ x)) ‚äî ùëíùëô (incl a)
  iso-\\ x i y with compare-‚àç y x
  ... | left x‚â†y = left (skip-‚àç y x x‚â†y)
  ... | just (refl-‚â£ , q) = right incl

  iso‚Åª¬π-\\ : ‚àÄ{as : ‚ãÜList A} -> {a : A} -> (x : as ‚àç a) -> ùëíùëô ((as \\ x)) ‚äî ùëíùëô (incl a) ‚ü∂ ùëíùëô as
  iso‚Åª¬π-\\ x = ‚¶ó Œπ-\\ x , single-‚àç x ‚¶ò

  module ¬ß-iso-\\ where
    prop-1 : ‚àÄ{as : ‚ãÜList A} -> {a : A} -> (x : as ‚àç a) -> iso-\\ x a x ‚â° right incl
    prop-1 x with compare-‚àç x x
    ... | left x‚â†x = impossible x‚â†x
    ... | just (p , q) with isset-Str p refl-‚â£
    ... | refl-‚â£ = refl-‚â°





