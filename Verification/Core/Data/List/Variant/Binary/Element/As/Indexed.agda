
module Verification.Core.Data.List.Variant.Binary.Element.As.Indexed where

open import Verification.Core.Conventions
open import Verification.Core.Setoid.Definition
open import Verification.Core.Setoid.Free
open import Verification.Core.Algebra.Monoid.Definition
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Morphism.Iso

open import Verification.Core.Data.Sum.Definition
open import Verification.Core.Data.List.Variant.Binary.Definition
open import Verification.Core.Data.List.Variant.Binary.Instance.Setoid
open import Verification.Core.Data.List.Variant.Binary.Instance.Monoid
open import Verification.Core.Data.List.Variant.Binary.Element.Definition

open import Verification.Core.Data.Indexed.Definition
open import Verification.Core.Data.Indexed.Instance.Monoid
open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Instance.Category
open import Verification.Core.Data.Universe.Instance.Monoid.By.Coproduct


module _ {A : ùí∞ ùëñ} where

  el : ùñ•ùóãùñæùñæ-ùêåùê®ùêß A -> ùêàùê± A (ùêîùêßùê¢ùêØ ùëñ)
  el a = indexed (Œª i ‚Üí a ‚àç i)

  macro
    ùëíùëô = #structureOn el

  private
    lem-1 : ‚àÄ{a : ùñ•ùóãùñæùñæ-ùêåùê®ùêß A} -> el (‚óå ‚ãÜ a) ‚âÖ el a
    lem-1 {a} = f since P
      where
        f : el (‚óå ‚ãÜ a) ‚ü∂ el a
        f _ (right-‚àç x) = x

        P = record
            { inverse-‚óÜ = Œª _ x -> right-‚àç x
            ; inv-r-‚óÜ   = Œª {i _ (right-‚àç x) ‚Üí right-‚àç x}
            ; inv-l-‚óÜ   = Œª _ -> refl
            }

    lem-2 : ‚àÄ{a : ùñ•ùóãùñæùñæ-ùêåùê®ùêß A} -> el (a ‚ãÜ ‚óå) ‚âÖ el a
    lem-2 {a} = f since P
      where
        f : el (a ‚ãÜ ‚óå) ‚ü∂ el a
        f _ (left-‚àç x) = x

        P = record
            { inverse-‚óÜ = Œª _ x -> left-‚àç x
            ; inv-r-‚óÜ   = Œª {i _ (left-‚àç x) ‚Üí left-‚àç x}
            ; inv-l-‚óÜ   = Œª _ -> refl
            }

    lem-3 : ‚àÄ{a b c : ùñ•ùóãùñæùñæ-ùêåùê®ùêß A} -> el (a ‚ãÜ b ‚ãÜ c) ‚âÖ el (a ‚ãÜ (b ‚ãÜ c))
    lem-3 {a} {b} {c} = f since P
      where
        f : el (a ‚ãÜ b ‚ãÜ c) ‚ü∂ el (a ‚ãÜ (b ‚ãÜ c))
        f _ (left-‚àç (left-‚àç x)) = left-‚àç x
        f _ (left-‚àç (right-‚àç x)) = right-‚àç (left-‚àç x)
        f _ (right-‚àç x) = right-‚àç (right-‚àç x)

        g : el (a ‚ãÜ (b ‚ãÜ c)) ‚ü∂ el (a ‚ãÜ b ‚ãÜ c)
        g _ (left-‚àç x) = left-‚àç (left-‚àç x)
        g _ (right-‚àç (left-‚àç x)) = left-‚àç (right-‚àç x)
        g _ (right-‚àç (right-‚àç x)) = right-‚àç x

        P‚ÇÄ : ‚àÄ{a : A} -> (x : (_ ‚àç a)) -> g _ (f _ x) ‚â° x
        P‚ÇÄ {a} (left-‚àç (left-‚àç x)) = refl-‚â°
        P‚ÇÄ {a} (left-‚àç (right-‚àç x)) = refl-‚â°
        P‚ÇÄ {a} (right-‚àç x) = refl-‚â°

        P‚ÇÅ : ‚àÄ{a : A} -> (x : (_ ‚àç a)) -> f _ (g _ x) ‚â° x
        P‚ÇÅ {a} (left-‚àç x) = refl-‚â°
        P‚ÇÅ {a} (right-‚àç (left-‚àç x)) = refl-‚â°
        P‚ÇÅ {a} (right-‚àç (right-‚àç x)) = refl-‚â°

        P = record
            { inverse-‚óÜ = g
            ; inv-r-‚óÜ = Œª _ -> funExt P‚ÇÄ
            ; inv-l-‚óÜ = Œª _ -> funExt P‚ÇÅ
            }

    lem-4 : ‚àÄ{a b c : ùñ•ùóãùñæùñæ-ùêåùê®ùêß A} -> (el a ‚âÖ el b) -> el (a ‚ãÜ c) ‚âÖ el (b ‚ãÜ c)
    lem-4 {a} {b} {c} f = g since P
      where
        g : el (a ‚ãÜ c) ‚ü∂ el (b ‚ãÜ c)
        g _ (left-‚àç x) = left-‚àç (‚ü® f ‚ü© _ x)
        g _ (right-‚àç x) = right-‚àç x

        h : el (b ‚ãÜ c) ‚ü∂ el (a ‚ãÜ c)
        h _ (left-‚àç x) = left-‚àç (inverse-‚óÜ (of f) _ x)
        h _ (right-‚àç x) = right-‚àç x

        P‚ÇÄ : ‚àÄ{a : A} -> (x : (_ ‚àç a)) -> h _ (g _ x) ‚â° x
        P‚ÇÄ (left-‚àç x) = cong left-‚àç (Œª i -> inv-r-‚óÜ (of f) _ i x)
        P‚ÇÄ (right-‚àç x) = refl-‚â°

        P‚ÇÅ : ‚àÄ{a : A} -> (x : (_ ‚àç a)) -> g _ (h _ x) ‚â° x
        P‚ÇÅ (left-‚àç x) = cong left-‚àç (Œª i -> inv-l-‚óÜ (of f) _ i x)
        P‚ÇÅ (right-‚àç x) = refl-‚â°

        P = record
            { inverse-‚óÜ = h
            ; inv-r-‚óÜ   = Œª _ -> funExt P‚ÇÄ
            ; inv-l-‚óÜ   = Œª _ -> funExt P‚ÇÅ
            }

    lem-5 : ‚àÄ{a b c : ùñ•ùóãùñæùñæ-ùêåùê®ùêß A} -> (el a ‚âÖ el b) -> el (c ‚ãÜ a) ‚âÖ el (c ‚ãÜ b)
    lem-5 {a}{b}{c} f = g since P
      where
        g : el (c ‚ãÜ a) ‚ü∂ el (c ‚ãÜ b)
        g _ (right-‚àç x) = right-‚àç (‚ü® f ‚ü© _ x)
        g _ (left-‚àç x) = left-‚àç x

        h : el (c ‚ãÜ b) ‚ü∂ el (c ‚ãÜ a)
        h _ (right-‚àç x) = right-‚àç (inverse-‚óÜ (of f) _ x)
        h _ (left-‚àç x) = left-‚àç x

        P‚ÇÄ : ‚àÄ{a : A} -> (x : (_ ‚àç a)) -> h _ (g _ x) ‚â° x
        P‚ÇÄ (left-‚àç x) = refl-‚â°
        P‚ÇÄ (right-‚àç x) = cong right-‚àç (Œª i -> inv-r-‚óÜ (of f) _ i x)

        P‚ÇÅ : ‚àÄ{a : A} -> (x : (_ ‚àç a)) -> g _ (h _ x) ‚â° x
        P‚ÇÅ (left-‚àç x) = refl-‚â°
        P‚ÇÅ (right-‚àç x) = cong right-‚àç (Œª i -> inv-l-‚óÜ (of f) _ i x)

        P = record
            { inverse-‚óÜ = h
            ; inv-r-‚óÜ   = Œª _ -> funExt P‚ÇÄ
            ; inv-l-‚óÜ   = Œª _ -> funExt P‚ÇÅ
            }

    lem-6 : el ‚óå ‚âÖ ‚óå
    lem-6 = f since P
      where
        f : el ‚óå ‚ü∂ ‚óå
        f _ ()

        g : ‚óå ‚ü∂ el ‚óå
        g _ ()

        P = record
            { inverse-‚óÜ = g
            ; inv-r-‚óÜ   = Œª {_ i ()}
            ; inv-l-‚óÜ   = Œª {_ i ()}
            }

    lem-7 : ‚àÄ{a b : ùñ•ùóãùñæùñæ-ùêåùê®ùêß A} -> el (a ‚ãÜ b) ‚âÖ el a ‚ãÜ el b
    lem-7 {a} {b} = f since P
      where
        f : el (a ‚ãÜ b) ‚ü∂ el a ‚ãÜ el b
        f _ (left-‚àç x) = left x
        f _ (right-‚àç x) = right x

        g : el a ‚ãÜ el b ‚ü∂ el (a ‚ãÜ b)
        g _ (left x) = left-‚àç x
        g _ (just x) = right-‚àç x

        P‚ÇÄ : ‚àÄ{a : A} -> (x : (_ ‚àç a)) -> g _ (f _ x) ‚â° x
        P‚ÇÄ (left-‚àç x)  = refl-‚â°
        P‚ÇÄ (right-‚àç x) = refl-‚â°

        P‚ÇÅ : ‚àÄ{a : A} -> (x : (_ ‚àç a) + (_ ‚àç a)) -> f _ (g _ x) ‚â° x
        P‚ÇÅ (left x)  = refl-‚â°
        P‚ÇÅ (right x) = refl-‚â°

        P = record
            { inverse-‚óÜ = g
            ; inv-r-‚óÜ   = Œª _ -> funExt P‚ÇÄ
            ; inv-l-‚óÜ   = Œª _ -> funExt P‚ÇÅ
            }


  instance
    isSetoidHom:el : isSetoidHom (ùñ•ùóãùñæùñæ-ùêåùê®ùêß A) (ùêàùê± A (ùêîùêßùê¢ùêØ ùëñ)) el
    isSetoidHom:el = record { cong-‚àº = rec-RST f}
      where
        f : ‚àÄ{a b : ùñ•ùóãùñæùñæ-ùêåùê®ùêß A} -> (a ‚àº-‚ãÜList b) -> _
        f unit-l-‚ãÜ-‚ßú = lem-1
        f unit-r-‚ãÜ-‚ßú = lem-2
        f assoc-l-‚ãÜ-‚ßú = lem-3
        f (cong-l-‚ãÜ-‚ßú p) = lem-4 (f p)
        f (cong-r-‚ãÜ-‚ßú p) = lem-5 (f p)

  instance
    isMonoidHom:el : isMonoidHom (ùñ•ùóãùñæùñæ-ùêåùê®ùêß A) (ùêàùê± A (ùêîùêßùê¢ùêØ ùëñ)) ùëíùëô
    isMonoidHom:el = record
                     { pres-‚óå = lem-6
                     ; pres-‚ãÜ = lem-7
                     }


  -- -- setoid hom to ùêÖùê¢ùêßùêàùê±
  -- open import Verification.Core.Category.Std.Category.Subcategory.Full
  -- private
  --   instance
  --     _ : isSetoid (ùêÖùêÆùê•ùê• (ùêàùê± A (ùêîùêßùê¢ùêØ ùëñ)) ùëíùëô)
  --     _ = isSetoid:byCategory

  -- isSetoidHom:incl-ùñ•ùóãùñæùñæ : isSetoidHom (ùñ•ùóãùñæùñæ-ùêåùê®ùêß A) (ùêÖùêÆùê•ùê• (ùêàùê± A (ùêîùêßùê¢ùêØ ùëñ)) ùëíùëô) incl
  -- isSetoidHom:incl-ùñ•ùóãùñæùñæ = record { cong-‚àº = Œª p ‚Üí {!!} }

  identify-‚àç : ‚àÄ{a b : A} -> incl a ‚àç b -> a ‚â£ b
  identify-‚àç incl = refl-‚â£



