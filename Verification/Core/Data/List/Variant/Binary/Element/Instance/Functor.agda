
module Verification.Core.Data.List.Variant.Binary.Element.Instance.Functor where

open import Verification.Core.Conventions hiding (‚Ñï)


open import Verification.Core.Set.Decidable
open import Verification.Core.Setoid.Definition
open import Verification.Core.Setoid.Free
open import Verification.Core.Algebra.Monoid.Definition

open import Verification.Core.Data.List.Variant.Binary.Definition
open import Verification.Core.Data.List.Variant.Binary.Instance.Setoid
open import Verification.Core.Data.List.Variant.Binary.Instance.Monoid
open import Verification.Core.Data.List.Variant.Binary.Instance.Functor
open import Verification.Core.Data.List.Variant.Binary.Element.Definition


module _ {A : ùí∞ ùëñ} {B : ùí∞ ùëó} where
  map-‚àç : (f : A -> B) -> {as : ‚ãÜList A} {a : A} -> as ‚àç a -> map-‚ãÜList f as ‚àç f a
  map-‚àç f incl = incl
  map-‚àç f (right-‚àç x) = right-‚àç (map-‚àç f x)
  map-‚àç f (left-‚àç x) = left-‚àç (map-‚àç f x)


