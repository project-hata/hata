
module Verification.Core.Data.List.Variant.Unary.Instance.Monoid where

open import Verification.Conventions

open import Verification.Core.Setoid
open import Verification.Core.Set.Contradiction
open import Verification.Core.Set.Decidable
open import Verification.Core.Set.Discrete
open import Verification.Core.Algebra.Monoid.Definition
open import Verification.Core.Data.List.Variant.Unary.Definition

-- [Lemma]
-- | The type |List A| has a monoid structure,
--   where |as ‚ãÜ bs| is given by appending the lists.

-- //

-- [Hide]
module _ {A : ùí∞ ùëñ} where
  module ListProofs where

    -- | The |<>| operation on lists is unital.
    lem-1 : ‚àÄ{a : List A} -> a <> [] ‚â£ a
    lem-1 {[]} = refl-‚â£
    lem-1 {x ‚à∑ a} = cong‚ÇÇ-Str _‚à∑_ refl-‚â£ lem-1

    -- | And it is associative.
    lem-2 : ‚àÄ{a b c : List A} -> (a <> b) <> c ‚â£ a <> (b <> c)
    lem-2 {[]} = refl-‚â£
    lem-2 {x ‚à∑ a} = cong‚ÇÇ-Str _‚à∑_ refl-‚â£ (lem-2 {a})

  open ListProofs

    -- | This means that lists are a monoid.

  instance
    isMonoid:List : isMonoid ‚Ä≤(List A)‚Ä≤
    isMonoid:List = record
                      { _‚ãÜ_ = _<>_
                      ; ‚óå = []
                      ; unit-l-‚ãÜ = refl
                      ; unit-r-‚ãÜ = lem-1
                      ; assoc-l-‚ãÜ = Œª {a} {b} {c} -> lem-2 {a} {b} {c}
                      ; _‚âÄ‚ãÜ‚âÄ_ = {!!}
                      }


module _ {A : ùí∞ ùëñ} {B : ùí∞ _} {{_ : B is Monoid ùëó}} where
  rec-List : (f : A -> B) -> List A -> B
  rec-List f [] = ‚óå
  rec-List f (a ‚à∑ as) = f a ‚ãÜ rec-List f as

  instance
    Notation:hasRec:List : Notation:hasRec (A -> B) (List A -> B)
    Notation:hasRec:List = record { rec = rec-List }

-- //

