
module Verification.Core.Data.List.Dependent.Variant.Unary.Definition where

open import Verification.Conventions

open import Verification.Core.Setoid
open import Verification.Core.Set.Contradiction
open import Verification.Core.Set.Decidable
open import Verification.Core.Set.Discrete
-- open import Verification.Core.Data.List.Variant.Binary.Natural

open import Verification.Core.Data.List.Variant.Unary.Definition
open import Verification.Core.Data.List.Variant.Unary.Natural

-- dependent lists

module _ {A : ­Юњ░ ­ЮЉќ} where
  mutual
    syntax Listр┤░ (╬╗ a -> B) as = List[ a Рѕѕ as ] B

    data Listр┤░ (B : A -> ­Юњ░ ­ЮЉЌ) : (as : List A) -> ­Юњ░ (­ЮЉќ №йц ­ЮЉЌ) where
      [] : List[ a Рѕѕ [] ] B a
      _Рѕи_ : Рѕђ{a as} -> B a -> List[ a Рѕѕ as ] B a -> List[ a Рѕѕ a Рѕи as ] B a



ConstListр┤░ : (A : ­Юњ░ ­ЮЉќ) (n : РЎ«РёЋ) -> ­Юњ░ _
ConstListр┤░ A = Listр┤░ (const A)

-- | And also the following:

Vec : ­Юњ░ ­ЮЉќ -> РЎ«РёЋ -> ­Юњ░ _
Vec A n = List[ i Рѕѕ n ] A


-- #Notation/Rewrite# РІєList = {}^{РІє}List


module _ {A : ­Юњ░ ­ЮЉќ} {B : A -> ­Юњ░ ­ЮЉЌ} where
  data _РѕЇРЎ«рхѕ_ : {as : List A} (bs : Listр┤░ B as) -> РѕЉ B -> ­Юњ░ (­ЮЉќ №йц ­ЮЉЌ) where
    take : Рѕђ{a as} {b : B a} {bs : Listр┤░ B as} -> (b Рѕи bs) РѕЇРЎ«рхѕ (a , b)
    skip : Рѕђ{a as v} {b : B a} {w : B v} {bs : Listр┤░ B as} -> bs РѕЇРЎ«рхѕ (v , w) -> (b Рѕи bs) РѕЇРЎ«рхѕ (v , w)




