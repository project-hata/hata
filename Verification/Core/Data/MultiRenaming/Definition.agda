
module Verification.Core.Data.MultiRenaming.Definition where

open import Verification.Conventions

open import Verification.Core.Setoid.Definition
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Functor.Definition
open import Verification.Core.Category.Std.Category.Instance.Category
open import Verification.Core.Category.Std.Functor.Instance.Category
open import Verification.Core.Category.Std.Natural.Definition
open import Verification.Core.Category.Std.Morphism.Iso
-- open import Verification.Core.Category.Std.Fibration.GrothendieckConstruction.Definition
open import Verification.Core.Category.Std.Fibration.GrothendieckConstruction.Op.Definition

open import Verification.Core.Algebra.Monoid.Definition
open import Verification.Core.Algebra.Monoid.Free
open import Verification.Core.Data.List.Variant.Binary.Element

open import Verification.Core.Data.Universe.Definition
open import Verification.Core.Data.Universe.Instance.Category
open import Verification.Core.Data.FiniteIndexed.Definition
open import Verification.Core.Data.Indexed.Definition
open import Verification.Core.Data.Renaming.Definition
open import Verification.Core.Category.Std.Category.Subcategory.Full
open import Verification.Core.Category.Std.Category.Subcategory.Definition
open import Verification.Core.Category.Std.Morphism.EpiMono
open import Verification.Core.Category.Std.Category.Opposite



module _ (K : ­Юњ░ ­ЮЉќ) (L : ­Юњ░ ­ЮЉЌ) where
  multiren : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ K -> ­Юљѓ­Юљџ­ЮљГ _
  multiren a = ­Юљѕ­Юљ▒ (РѕЉ (РЪе a РЪЕ РѕЇ_)) Рђ▓(РЎ«­ЮљЉ­Юљъ­ЮљД L рхњрхќРї»рхў)Рђ▓
  macro ­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = #structureOn multiren

module _ {K : ­Юњ░ ­ЮЉќ} {L : ­Юњ░ ­ЮЉЌ} where
  private
    РёЏ : ­Юњ░ _
    РёЏ = РЎ«­ЮљЉ­Юљъ­ЮљД L

  map-­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ : Рѕђ{a b : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ K} -> (f : b РЪХ a) -> Functor (­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ K L a) (­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ K L b)
  map-­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ {a} {b} f = F since isFunctor:F
    where
      F : ­Юљѕ­Юљ▒ (РѕЉ (РЪе a РЪЕ РѕЇ_)) (РёЏ рхњрхќРї») -> ­Юљѕ­Юљ▒ (РѕЉ (РЪе b РЪЕ РѕЇ_)) (РёЏ рхњрхќРї»)
      F x = indexed ╬╗ (k , kp) Рєњ ix x (k , map f k kp)

      map-F : Рѕђ{x y : ­Юљѕ­Юљ▒ (РѕЉ (РЪе a РЪЕ РѕЇ_)) (РёЏ рхњрхќРї»)} -> (g : x РЪХ y) -> F x РЪХ F y
      map-F {x} {y} g = ╬╗ i Рєњ g _

      isFunctor:F : isFunctor _ _ F
      isFunctor.map isFunctor:F = map-F
      isFunctor.isSetoidHom:map isFunctor:F = {!!}
      isFunctor.functoriality-id isFunctor:F = {!!}
      isFunctor.functoriality-РЌє isFunctor:F = {!!}

  instance
    isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ : isFunctor (­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ K рхњрхќ) (­Юљѓ­Юљџ­ЮљГ _) (­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ K L)
    isFunctor.map isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = map-­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ
    isFunctor.isSetoidHom:map isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = {!!}
    isFunctor.functoriality-id isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = {!!}
    isFunctor.functoriality-РЌє isFunctor:­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ = {!!}

module _ (K : ­Юњ░ ­ЮЉќ) (L : ­Юњ░ ­ЮЉЌ) where
  MultiRen = Реірхњрхќрхў (­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ K L)
  macro ­Юљї­Юљ«­ЮљЦ­ЮљГ­Юљб­ЮљЉ­Юљъ­ЮљД = #structureOn MultiRen


-- | The category ­Юљї­Юљ«­ЮљЦ­ЮљГ­Юљб­ЮљЉ­Юљъ­ЮљД has coproducts.
--   Actually, one could show this by showing that the functor |­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ : ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒ РЪХ ­Юљѓ­Юљџ­ЮљГ|,
--   seen as the fibration |Реі ­ЮЉџ­ЮЉб­ЮЉЎ­ЮЉА­ЮЉќ­ЮЉЪ­ЮЉњ­ЮЉЏ РЪХ ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒| is a stack/2-sheaf
--   since it seems that stacks inherit the coproducts from their base category, i.e., ­ЮљЁ­Юљб­ЮљД­Юљѕ­Юљ▒.
--
--   For basics on stacks see http://homepage.sns.it/vistoli/descent.pdf .





