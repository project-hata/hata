
module Verification.Core.Algebra.MonoidWithZero.Definition where

open import Verification.Conventions

open import Verification.Core.Set.Decidable
open import Verification.Core.Setoid.Definition
open import Verification.Core.Algebra.Monoid.Definition


record hasZero (A : Monoid ùëñ) : ùí∞ ùëñ where
  field ‚óç : ‚ü® A ‚ü©
  field absorb-r-‚ãÜ : ‚àÄ{a : ‚ü® A ‚ü©} -> a ‚ãÜ ‚óç ‚àº ‚óç
  field absorb-l-‚ãÜ : ‚àÄ{a : ‚ü® A ‚ü©} -> ‚óç ‚ãÜ a ‚àº ‚óç
  field decide-‚óç : (a : ‚ü® A ‚ü©) -> isDecidable (a ‚àº ‚óç)
open hasZero {{...}} public

Monoid‚ÇÄ : ‚àÄ ùëñ -> ùí∞ _
Monoid‚ÇÄ ùëñ = Monoid ùëñ :& hasZero

module _ (ùëñ) where
  macro ùêåùê®ùêß‚ÇÄ = #structureOn (Monoid‚ÇÄ ùëñ)

-- record zeroIsDecidable (A : Monoid‚ÇÄ ùëñ) : ùí∞ ùëñ where
--   field decide-‚óç : (a : ‚ü® A ‚ü©) -> isDecidable (a ‚àº ‚óç)
-- open zeroIsDecidable {{...}} public




