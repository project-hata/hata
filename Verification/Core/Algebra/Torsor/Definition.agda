
module Verification.Core.Algebra.Torsor.Definition where

open import Verification.Conventions
-- open import Verification.Core.Data.Prop.Everything
open import Verification.Core.Set.Setoid.Definition
open import Verification.Core.Algebra.Monoid.Definition
open import Verification.Core.Algebra.MonoidAction.Definition
open import Verification.Core.Algebra.MonoidAction.Instance.Category
open import Verification.Core.Algebra.Group.Definition
open import Verification.Core.Category.Std.Fibration.GrothendieckConstruction.Op.Definition
open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Category.Subcategory.Full2

-- record isTorsor (M : Monoid ­ЮЉќ) (T : Acted M ­ЮЉЌ) : ­Юњ░ (­ЮЉќ №йц ­ЮЉЌ) where

module _ (M : Monoid ­ЮЉќ) where
  isTorsor : Рѕђ{­ЮЉЌ} -> Acted M ­ЮЉЌ -> _
  isTorsor = isFreeActed :, isTransitiveActed

  Torsor : Рѕђ ­ЮЉЌ -> _
  Torsor ­ЮЉЌ = _ :& isTorsor {­ЮЉЌ}


-- _-­ЮљЊ­Юље­ЮљФ­Юљг : (Monoid ­ЮЉќ ├Ќ-­Юњ░ ­ЮћЈ ^ 2) -> ­Юњ░ _
-- _-­ЮљЊ­Юље­ЮљФ­Юљг (M , ­ЮЉЌ) = Torsor M ­ЮЉЌ

module _ ­ЮЉќ ­ЮЉЌ where
  record ­ЮљЊ­Юље­ЮљФ­Юљгрхў : ­Юњ░ (­ЮЉќ РЂ║ №йц ­ЮЉЌ РЂ║) where
    constructor _,_
    field fst : Monoid ­ЮЉќ
    field snd : Torsor fst ­ЮЉЌ

  macro ­ЮљЊ­Юље­ЮљФ­Юљг = #structureOn ­ЮљЊ­Юље­ЮљФ­Юљгрхў


╬╣рхў-­ЮљЊ­Юље­ЮљФ­Юљг : ­ЮљЊ­Юље­ЮљФ­Юљг ­ЮЉќ ­ЮЉЌ -> ­Юљђ­Юљю­ЮљГ _ _
╬╣рхў-­ЮљЊ­Юље­ЮљФ­Юљг (M , T) = M , Рє│ T

module _ {­ЮЉќ ­ЮЉЌ} where
  instance
    isCategory:­ЮљЊ­Юље­ЮљФ­Юљг : isCategory (­ЮљЊ­Юље­ЮљФ­Юљг ­ЮЉќ ­ЮЉЌ)
    isCategory:­ЮљЊ­Юље­ЮљФ­Юљг = isCategory:FullSubcategory (╬╣рхў-­ЮљЊ­Юље­ЮљФ­Юљг {­ЮЉќ} {­ЮЉЌ})

-- ­ЮљЊ­Юље­ЮљФ­Юљгрхў : Рѕђ ­ЮЉќ ­ЮЉЌ -> ­Юњ░ _
-- ­ЮљЊ­Юље­ЮљФ­Юљгрхў ­ЮЉќ ­ЮЉЌ = FullSubcategory (­Юљђ­Юљю­ЮљГ _ _) (╬╣рхў-­ЮљЊ­Юље­ЮљФ­Юљг {­ЮЉќ} {­ЮЉЌ})



