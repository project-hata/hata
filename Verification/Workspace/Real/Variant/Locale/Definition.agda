
--
-- WIP for Êóó/Core
--
-- Real numbers as a locale.
--
-- This file is not original research, it is mostly going to be
-- an implementation of https://ncatlab.org/nlab/show/locale+of+real+numbers.
--

module Verification.Workspace.Real.Variant.Locale.Definition where

open import Verification.Conventions



-- definitions for axiomatizing the rational numbers
open import Verification.Core.Setoid.Definition
-- open import Verification.Core.Algebra.Monoid.Definition
-- open import Verification.Core.Algebra.Group.Definition
-- open import Verification.Core.Algebra.Group.Quotient
-- open import Verification.Core.Algebra.Abelian.Definition
-- open import Verification.Core.Algebra.Ring.Definition
-- open import Verification.Core.Algebra.Ring.Domain
-- open import Verification.Core.Algebra.Ring.Ordered
open import Verification.Workspace.Structure.Example.Algebra.Monoid.Definition
open import Verification.Workspace.Structure.Example.Algebra.Group.Definition
open import Verification.Workspace.Structure.Example.Algebra.Abelian.Definition
open import Verification.Workspace.Structure.Example.Algebra.Ring.Definition
open import Verification.Workspace.Structure.Example.Algebra.Ring.Ordered
open import Verification.Core.Order.Linearorder
open import Verification.Core.Order.Preorder
open import Verification.Core.Order.Totalorder

open import Verification.Core.Data.Prop.Definition
open import Verification.Core.Data.Sum.Definition
open import Verification.Core.Data.Product.Definition

open import Verification.Core.Category.Std.Category.Definition
open import Verification.Core.Category.Std.Morphism.Iso.Definition
open import Verification.Core.Setoid.Definition
open import Verification.Core.Setoid.Instance.Category
open import Verification.Core.Setoid.Codiscrete
open import Verification.Core.Setoid.Power.Definition

open import Verification.Core.Setoid.Power.Instance.Category
open import Verification.Core.Category.Std.Limit.Specific.Coproduct.Definition
open import Verification.Core.Category.Std.Limit.Specific.Product.Definition
open import Verification.Core.Setoid.Power.Union
open import Verification.Core.Setoid.Power.Intersection

open import Verification.Core.Setoid.Power.Instance.HasCoproducts
open import Verification.Core.Setoid.Power.Instance.HasProducts
open import Verification.Core.Setoid.Construction.Product

open import Verification.Workspace.Structure.Definition2



--
-- We abstract over the notion of rational number, to allow
-- for external implementations.
--

-- record isRational (Q : OrderedRing ùëñ) : ùí∞ ùëñ where
--   -- field {{isOrderedRing:this}} : isOrderedRing Q

-- module _ (ùëñ : ùîè) where
--   Rational = OrderedRing (ùëñ , ùëñ , ùëñ) :& isRational

--
-- The definition of opens.
--
module _ {ùëñ : ùîè} {Q : OrderedRing (ùëñ , ùëñ , ùëñ)} where
  macro ‚Ñö = #structureOn ‚ü® Q ‚ü©

  _ = LinearAsTotal.isTotal:Linear {ùëó = ùëñ} {A = ‚Ñö} {{it}}


  record isOpen (U : ùí´ (‚Ñö √ó-ùêíùê≠ùêù ‚Ñö)) : ùí∞ ùëñ where
    field O1 : ‚àÄ{a b : ‚Ñö} -> a ‚âÆ b -> (a , b) ‚àà U
    field O2 : ‚àÄ{a b c d : ‚Ñö} -> a ‚âÆ b -> (b , c) ‚àà U -> c ‚âÆ d -> (a , d) ‚àà U
    field O3 : ‚àÄ{a b c d : ‚Ñö} -> (a , b) ‚àà U -> c < b -> (c , d) ‚àà U -> (a , d) ‚àà U
    field O4 : ‚àÄ{a d : ‚Ñö} -> (‚àÄ{b c : ‚Ñö} -> a < b -> c < d -> (b , c) ‚àà U) -> (a , d) ‚àà U

  open isOpen {{...}} public

  Opens = ‚àë isOpen

{-

  -- data Open : ‚Ñö -> ‚Ñö -> ùí∞ ùëñ where
  --   O1 : ‚àÄ{a b : ‚Ñö} -> a ‚âÆ b -> Open a b
  --   O2 : ‚àÄ{a b c d} -> a ‚âÆ b -> b ‚àº c -> c ‚âÆ d -> Open a d
  --   O3 : ‚àÄ{a b c d} -> a ‚àº b -> c < b -> c ‚àº d -> Open a d
  --   O4 : ‚àÄ{a d} -> (‚àÄ{b c} -> a < b -> c < d -> Open b c) -> Open a d


  -- record Opens : ùí∞ ùëñ where
  --   constructor _,_because_
  --   field fst : ‚Ñö
  --   field snd : ‚Ñö
  --   field op : Open fst snd

-}





  Œπ-Opens : Opens -> ùí´ (‚Ñö √ó ‚Ñö)
  Œπ-Opens = fst


  open import Verification.Core.Category.Std.Category.Subcategory.Full

  ‚Ñù·µò : ùí∞ _
  ‚Ñù·µò = ùêÖùêÆùê•ùê• (ùí´ (‚Ñö √ó ‚Ñö)) Œπ-Opens

  macro ‚Ñù = #structureOn ‚Ñù·µò

  --
  -- now we show that Op has various limits.
  --
  ‚ä§-‚Ñù : ‚Ñù
  ‚ä§-‚Ñù = incl (‚ä§ , P)
    where
      P : isOpen ‚ä§
      P = record
          { O1 = Œª x ‚Üí tt
          ; O2 = Œª x x‚ÇÅ x‚ÇÇ ‚Üí tt
          ; O3 = Œª x x‚ÇÅ x‚ÇÇ ‚Üí tt
          ; O4 = Œª x ‚Üí tt
          }

  instance
    isTerminal:‚ä§-‚Ñù : isTerminal ‚ä§-‚Ñù
    isTerminal:‚ä§-‚Ñù = record { intro-‚ä§ = incl intro-‚ä§ ; expand-‚ä§ = incl tt }

  _‚äì-‚Ñù_ : ‚Ñù -> ‚Ñù -> ‚Ñù
  _‚äì-‚Ñù_ G H = incl (fst ‚ü® G ‚ü© ‚äì fst ‚ü® H ‚ü© , P)
    where
      instance _ = snd ‚ü® G ‚ü©
      instance _ = snd ‚ü® H ‚ü©
      GH = (fst ‚ü® G ‚ü© ‚äì fst ‚ü® H ‚ü©)

      P : isOpen GH
      P = record
        { O1 = Œª {a b : ‚Ñö} (p : a ‚âÆ b) -> (O1 p) , (O1 p)
        ; O2 = Œª {a b c d : ‚Ñö} (p : a ‚âÆ b) (q : (b , c) ‚àà GH) (r : c ‚âÆ d) -> O2 p (fst q) r , O2 p (snd q) r
        ; O3 = Œª p q r -> O3 (fst p) q (fst r) , O3 (snd p) q (snd r)
        ; O4 = Œª F -> O4 (Œª p q -> fst (F p q)) , O4 Œª p q -> snd (F p q)
        }

  ‚ä•-‚Ñù : ‚Ñù
  ‚ä•-‚Ñù = incl (X since isSubsetoid:X , {!!})
    where
      X : ‚Ñö √ó ‚Ñö -> Prop _
      X (a , b) = ‚à£ a ‚âÆ b ‚à£

      P : {a b : ‚ü® Q ‚ü© √ó-ùí∞ ‚ü® Q ‚ü©} ‚Üí (a ‚àº b) -> a ‚àà X -> b ‚àà X
      P {(a , b)} {(x , y)} (p , q) r s = r (transp-< (sym p) (sym q) s)

      instance
        isSubsetoid:X : isSubsetoid X
        isSubsetoid:X = record { transp-Subsetoid = P }


      isOpen:X : isOpen ‚Ä≤ X ‚Ä≤
      isOpen:X = record
        { O1 = Œª a‚âÆb ‚Üí a‚âÆb
        ; O2 = Œª a‚âÆb b‚âÆc c‚âÆd -> c‚âÆd ‚ü° b‚âÆc ‚ü° a‚âÆb
        ; O3 = Œª {a} {b} {c} {d} a‚âÆb c<b c‚âÆd a<d -> case compare-< a<d b of a‚âÆb Œª b<d -> c‚âÆd (c<b ‚àô-< b<d)
        ; O4 = Œª {a} {d} F a<d ->
                 let c : ‚Ñö
                     c = {!!}
                     c' : ‚Ñö
                     c' = {!!}
                     p : a < c
                     p = {!!}
                     q : c' < d
                     q = {!!}
                     r : c < c'
                     r = {!!}
                 in F p q r
        }

        -- record { transp-Subsetoid = Œª {(a , b) (x , y) : ‚Ñö √ó ‚Ñö } -> {!!} }
  -- module _ (G H : ‚Ñù) where




