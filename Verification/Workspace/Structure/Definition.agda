
module Verification.Workspace.Structure.Definition where

open import Verification.Conventions


record _:&'_ (UU : ùí∞ ùëñ) {{U : hasU UU ùëò ùëô}} (P : UU -> ùí∞ ùëó) : ùí∞ (ùëó ÔΩ§ ùëò ÔΩ§ ùëô) where
  constructor make:&'
  field ‚ü®_‚ü© : getU U
  -- field overlap {{oldProof}} : getP U ‚ü®_‚ü©
  field oldProof' : getP U ‚ü®_‚ü©
  field of'_ : P (reconstruct U (‚ü®_‚ü© , oldProof'))
  -- field {{of_}} : P (reconstruct U (‚ü®_‚ü© , oldProof))
-- open _:&'_ {{...}} public hiding (‚ü®_‚ü©)
-- open _:&'_ public using (‚ü®_‚ü©)
open _:&'_ public

-- pattern ‚Ä≤_‚Ä≤ = ‚Ä≤_‚Ä≤
infixl 30 _:&'_


record ‚àëi'_ {A : ùí∞ ùëñ} (B : A -> ùí∞ ùëó) : ùí∞ (ùëñ ÔΩ§ ùëó) where
  constructor make‚àëi
  -- field overlap {{ifst}} : A
  field ifst : A
  -- field overlap {{isnd}} : B (ifst)
  field isnd : B (ifst)
open ‚àëi'_ public



instance
  hasU:&' : {UU : ùí∞ ùëñ} {{U : hasU UU ùëò ùëô}} {P : UU -> ùí∞ ùëó} -> hasU (UU :&' P) _ _
  getU (hasU:&' {UU = A} {{U}}) = getU U
  getP (hasU:&' {UU = A} {{U}} {P = P}) a = ‚àëi' Œª (p1 : getP U a) -> P (reconstruct U (a , p1))
  reconstruct (hasU:&' {UU = A} {{U}} {P = P}) (a , pa) = make:&' a (pa .ifst) (pa .isnd)
  destructEl (hasU:&' {UU = A} ‚¶É U ‚¶Ñ {P = P}) (make:&' a _ _) = a
  destructP (hasU:&' {UU = A} {{U}} {P = P}) (record { ‚ü®_‚ü© = a ; oldProof' = pmain ; of'_ = pof }) = make‚àëi pmain pof



