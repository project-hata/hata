
module Verification.Research.Strictification.Main where

open import Verification.Conventions hiding (_‚â°_) renaming (_‚â£_ to _‚â°_ ; _‚â¢-Str_ to _‚â¢_)
open import Verification.Core.Data.List.Variant.Unary.Definition
open import Verification.Core.Data.List.Dependent.Variant.Unary.Definition



record FOSignature (ùëñ : ùîè ^ 2) : ùí∞ (ùëñ ‚Å∫) where

  field Type : ùí∞ (ùëñ ‚åÑ 0)
  field Ctor : ùí∞ (ùëñ ‚åÑ 1)
  field typeof : Ctor -> Type
  field argsof : Ctor -> List Type

  -- field {{isDiscrete:Sort}} : isDiscrete Sort
  -- field {{isDiscrete:Con}} : ‚àÄ{Œ±s Œ±} -> isDiscrete (Con Œ±s Œ±)
  -- field {{isSet-Str:Sort}} : isSet-Str Sort

open FOSignature public
-- open FOSignature public using (Type ; Ctor)
-- open FOSignature {{...}} public using (typeof ; argsof)

module _ (Œ£ : FOSignature ùëñ) where
  data FOTree : (Œ± : Type Œ£) -> ùí∞ ùëñ where
    [] : ‚àÄ{Œ±} -> FOTree Œ±
    con : (c : Ctor Œ£) -> List[ Œ≤ ‚àà argsof Œ£ c ] (FOTree Œ≤) -> FOTree (typeof Œ£ c)


module _ {Œ£ : FOSignature ùëñ} where
  data _‚àçFO_ : ‚àÄ{Œ±} -> (FOTree Œ£ Œ±) -> Type Œ£ -> ùí∞ ùëñ where
    [] : ‚àÄ{Œ±} -> [] {Œ± = Œ±} ‚àçFO Œ±
    con : {c : Ctor Œ£} -> {ts : List[ Œ≤ ‚àà argsof Œ£ c ] (FOTree Œ£ Œ≤)} -> ‚àÄ{Œ≤ t} -> (_ : ts ‚àç‚ôÆ·µà (Œ≤ , t)) -> ‚àÄ{Œ≥} -> t ‚àçFO Œ≥ -> con c ts ‚àçFO Œ≥
















-- module _ (Œ£ : FOSignature ùëñ) where

--   data Term : List (Type Œ£) -> Type Œ£ -> ùí∞ ùëñ where

--     -- var : ‚àÄ{Œ± Œ±s} -> Œ±s ‚àç Œ± -> Term Œ±s Œ±
--     -- con : ‚àÄ{Œ≥s Œ≤s Œ±} -> (f : Con Œ£ Œ≤s Œ±) -> ‚ãÜList[ Œ≤ ‚àà Œπ Œ≤s ] (Term Œ≥s Œ≤) -> Term Œ≥s Œ±


-- module _ (Œ£ : FOSignature ùëñ) where
--   EŒ£ : FOSignature _
--   EŒ£ = record
--        { Type = {!!}
--        ; Ctor = Ctor Œ£
--        ; typeof = {!!}
--        ; argsof = {!!}
--        }

